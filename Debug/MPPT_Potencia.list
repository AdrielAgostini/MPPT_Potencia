
MPPT_Potencia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004558  08004558  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004558  08004558  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004558  08004558  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000074  080045d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080045d4  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef83  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002654  00000000  00000000  0002f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00032508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eee  00000000  00000000  00033288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ae8  00000000  00000000  0004c176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eea6  00000000  00000000  0005dc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecb04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f10  00000000  00000000  000ecb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004468 	.word	0x08004468

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004468 	.word	0x08004468

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;
uint32_t i_offset = 0;

void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  hadc1.Instance = ADC1;
 8000160:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <MX_ADC1_Init+0x4c>)
 8000162:	4a12      	ldr	r2, [pc, #72]	; (80001ac <MX_ADC1_Init+0x50>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <MX_ADC1_Init+0x4c>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <MX_ADC1_Init+0x4c>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b0d      	ldr	r3, [pc, #52]	; (80001a8 <MX_ADC1_Init+0x4c>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <MX_ADC1_Init+0x4c>)
 800017a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <MX_ADC1_Init+0x4c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <MX_ADC1_Init+0x4c>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	4806      	ldr	r0, [pc, #24]	; (80001a8 <MX_ADC1_Init+0x4c>)
 800018e:	f000 fffd 	bl	800118c <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 8000198:	f000 fdfa 	bl	8000d90 <Error_Handler>
  }
  HAL_ADCEx_Calibration_Start(&hadc1);
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <MX_ADC1_Init+0x4c>)
 800019e:	f001 fc4d 	bl	8001a3c <HAL_ADCEx_Calibration_Start>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000090 	.word	0x20000090
 80001ac:	40012400 	.word	0x40012400

080001b0 <ADC_Select_CH0>:

void ADC_Select_CH0 (void){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80001c4:	2301      	movs	r3, #1
 80001c6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80001c8:	2302      	movs	r3, #2
 80001ca:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	4619      	mov	r1, r3
 80001d0:	4805      	ldr	r0, [pc, #20]	; (80001e8 <ADC_Select_CH0+0x38>)
 80001d2:	f001 fa9f 	bl	8001714 <HAL_ADC_ConfigChannel>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <ADC_Select_CH0+0x30>
    {
        Error_Handler();
 80001dc:	f000 fdd8 	bl	8000d90 <Error_Handler>
    }
}
 80001e0:	bf00      	nop
 80001e2:	3710      	adds	r7, #16
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000090 	.word	0x20000090

080001ec <ADC_Select_CH1>:

void ADC_Select_CH1 (void){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_1;
 80001fc:	2301      	movs	r3, #1
 80001fe:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000200:	2301      	movs	r3, #1
 8000202:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000204:	2302      	movs	r3, #2
 8000206:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	4619      	mov	r1, r3
 800020c:	4805      	ldr	r0, [pc, #20]	; (8000224 <ADC_Select_CH1+0x38>)
 800020e:	f001 fa81 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <ADC_Select_CH1+0x30>
    {
        Error_Handler();
 8000218:	f000 fdba 	bl	8000d90 <Error_Handler>
    }
}
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000090 	.word	0x20000090

08000228 <ADC_Select_CH2>:

void ADC_Select_CH2 (void){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_2;
 8000238:	2302      	movs	r3, #2
 800023a:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800023c:	2301      	movs	r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000240:	2302      	movs	r3, #2
 8000242:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4619      	mov	r1, r3
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <ADC_Select_CH2+0x38>)
 800024a:	f001 fa63 	bl	8001714 <HAL_ADC_ConfigChannel>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <ADC_Select_CH2+0x30>
    {
        Error_Handler();
 8000254:	f000 fd9c 	bl	8000d90 <Error_Handler>
    }
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000090 	.word	0x20000090

08000264 <ADC_Select_CH3>:

void ADC_Select_CH3 (void){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_3;
 8000274:	2303      	movs	r3, #3
 8000276:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000278:	2301      	movs	r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800027c:	2302      	movs	r3, #2
 800027e:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <ADC_Select_CH3+0x38>)
 8000286:	f001 fa45 	bl	8001714 <HAL_ADC_ConfigChannel>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <ADC_Select_CH3+0x30>
    {
        Error_Handler();
 8000290:	f000 fd7e 	bl	8000d90 <Error_Handler>
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000090 	.word	0x20000090

080002a0 <ADC_Select_CH4>:

void ADC_Select_CH4 (void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_4;
 80002b0:	2304      	movs	r3, #4
 80002b2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b4:	2301      	movs	r3, #1
 80002b6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002b8:	2302      	movs	r3, #2
 80002ba:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4619      	mov	r1, r3
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <ADC_Select_CH4+0x38>)
 80002c2:	f001 fa27 	bl	8001714 <HAL_ADC_ConfigChannel>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <ADC_Select_CH4+0x30>
    {
        Error_Handler();
 80002cc:	f000 fd60 	bl	8000d90 <Error_Handler>
    }
}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000090 	.word	0x20000090

080002dc <getValue>:


uint16_t getValue(uint8_t selection){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    uint32_t val_meas=0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61fb      	str	r3, [r7, #28]
    uint32_t i_meas =0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61bb      	str	r3, [r7, #24]
    uint32_t r =0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
    int16_t i=0,k=0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	82fb      	strh	r3, [r7, #22]
 80002f6:	2300      	movs	r3, #0
 80002f8:	81fb      	strh	r3, [r7, #14]

    switch (selection){
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	f200 812d 	bhi.w	800055c <getValue+0x280>
 8000302:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <getValue+0x2c>)
 8000304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000308:	0800031d 	.word	0x0800031d
 800030c:	08000391 	.word	0x08000391
 8000310:	080003c7 	.word	0x080003c7
 8000314:	08000409 	.word	0x08000409
 8000318:	080004b5 	.word	0x080004b5
        case VOUT: 
        	i_meas=0;
 800031c:	2300      	movs	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
			for (i=0;i<20;i++){
 8000320:	2300      	movs	r3, #0
 8000322:	82fb      	strh	r3, [r7, #22]
 8000324:	e01c      	b.n	8000360 <getValue+0x84>
            ADC_Select_CH4();
 8000326:	f7ff ffbb 	bl	80002a0 <ADC_Select_CH4>
            HAL_ADC_Start(&hadc1);
 800032a:	488f      	ldr	r0, [pc, #572]	; (8000568 <getValue+0x28c>)
 800032c:	f001 f806 	bl	800133c <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1,1000);
 8000330:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000334:	488c      	ldr	r0, [pc, #560]	; (8000568 <getValue+0x28c>)
 8000336:	f001 f8db 	bl	80014f0 <HAL_ADC_PollForConversion>
            i_meas += HAL_ADC_GetValue(&hadc1);
 800033a:	488b      	ldr	r0, [pc, #556]	; (8000568 <getValue+0x28c>)
 800033c:	f001 f9de 	bl	80016fc <HAL_ADC_GetValue>
 8000340:	4602      	mov	r2, r0
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	4413      	add	r3, r2
 8000346:	61bb      	str	r3, [r7, #24]
            HAL_ADC_Stop(&hadc1);
 8000348:	4887      	ldr	r0, [pc, #540]	; (8000568 <getValue+0x28c>)
 800034a:	f001 f8a5 	bl	8001498 <HAL_ADC_Stop>
            HAL_Delay(1);
 800034e:	2001      	movs	r0, #1
 8000350:	f000 fef8 	bl	8001144 <HAL_Delay>
			for (i=0;i<20;i++){
 8000354:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000358:	b29b      	uxth	r3, r3
 800035a:	3301      	adds	r3, #1
 800035c:	b29b      	uxth	r3, r3
 800035e:	82fb      	strh	r3, [r7, #22]
 8000360:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000364:	2b13      	cmp	r3, #19
 8000366:	ddde      	ble.n	8000326 <getValue+0x4a>
			}val_meas = i_meas/20;
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	4a80      	ldr	r2, [pc, #512]	; (800056c <getValue+0x290>)
 800036c:	fba2 2303 	umull	r2, r3, r2, r3
 8000370:	091b      	lsrs	r3, r3, #4
 8000372:	61fb      	str	r3, [r7, #28]
            val_meas = (val_meas* V_REF * RDIV_N_2 ) / (RDIV_D_2 * N_BITS);
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	f641 12c8 	movw	r2, #6600	; 0x19c8
 800037a:	fb03 f202 	mul.w	r2, r3, r2
 800037e:	4b7c      	ldr	r3, [pc, #496]	; (8000570 <getValue+0x294>)
 8000380:	fba3 1302 	umull	r1, r3, r3, r2
 8000384:	1ad2      	subs	r2, r2, r3
 8000386:	0852      	lsrs	r2, r2, #1
 8000388:	4413      	add	r3, r2
 800038a:	0adb      	lsrs	r3, r3, #11
 800038c:	61fb      	str	r3, [r7, #28]
        break;
 800038e:	e0e5      	b.n	800055c <getValue+0x280>

        case VIN:
            ADC_Select_CH2();
 8000390:	f7ff ff4a 	bl	8000228 <ADC_Select_CH2>
            HAL_ADC_Start(&hadc1);
 8000394:	4874      	ldr	r0, [pc, #464]	; (8000568 <getValue+0x28c>)
 8000396:	f000 ffd1 	bl	800133c <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1,1000);
 800039a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800039e:	4872      	ldr	r0, [pc, #456]	; (8000568 <getValue+0x28c>)
 80003a0:	f001 f8a6 	bl	80014f0 <HAL_ADC_PollForConversion>
            val_meas = HAL_ADC_GetValue(&hadc1);
 80003a4:	4870      	ldr	r0, [pc, #448]	; (8000568 <getValue+0x28c>)
 80003a6:	f001 f9a9 	bl	80016fc <HAL_ADC_GetValue>
 80003aa:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc1);
 80003ac:	486e      	ldr	r0, [pc, #440]	; (8000568 <getValue+0x28c>)
 80003ae:	f001 f873 	bl	8001498 <HAL_ADC_Stop>
            val_meas = (val_meas* V_REF * RDIV_N_1 ) / (N_BITS * RDIV_D_1);
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	4a6f      	ldr	r2, [pc, #444]	; (8000574 <getValue+0x298>)
 80003b6:	fb02 f303 	mul.w	r3, r2, r3
 80003ba:	4a6f      	ldr	r2, [pc, #444]	; (8000578 <getValue+0x29c>)
 80003bc:	fba2 2303 	umull	r2, r3, r2, r3
 80003c0:	0b9b      	lsrs	r3, r3, #14
 80003c2:	61fb      	str	r3, [r7, #28]
        break;
 80003c4:	e0ca      	b.n	800055c <getValue+0x280>

        case VINTRM:
            ADC_Select_CH3();
 80003c6:	f7ff ff4d 	bl	8000264 <ADC_Select_CH3>
            HAL_ADC_Start(&hadc1);
 80003ca:	4867      	ldr	r0, [pc, #412]	; (8000568 <getValue+0x28c>)
 80003cc:	f000 ffb6 	bl	800133c <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1,1000);
 80003d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d4:	4864      	ldr	r0, [pc, #400]	; (8000568 <getValue+0x28c>)
 80003d6:	f001 f88b 	bl	80014f0 <HAL_ADC_PollForConversion>
            val_meas = HAL_ADC_GetValue(&hadc1) + i_meas;
 80003da:	4863      	ldr	r0, [pc, #396]	; (8000568 <getValue+0x28c>)
 80003dc:	f001 f98e 	bl	80016fc <HAL_ADC_GetValue>
 80003e0:	4602      	mov	r2, r0
 80003e2:	69bb      	ldr	r3, [r7, #24]
 80003e4:	4413      	add	r3, r2
 80003e6:	61fb      	str	r3, [r7, #28]
            HAL_ADC_Stop(&hadc1);
 80003e8:	485f      	ldr	r0, [pc, #380]	; (8000568 <getValue+0x28c>)
 80003ea:	f001 f855 	bl	8001498 <HAL_ADC_Stop>
            val_meas = (val_meas* V_REF * RDIV_N_4 ) / (N_BITS * RDIV_D_4);
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	4a62      	ldr	r2, [pc, #392]	; (800057c <getValue+0x2a0>)
 80003f2:	fb03 f202 	mul.w	r2, r3, r2
 80003f6:	4b62      	ldr	r3, [pc, #392]	; (8000580 <getValue+0x2a4>)
 80003f8:	fba3 1302 	umull	r1, r3, r3, r2
 80003fc:	1ad2      	subs	r2, r2, r3
 80003fe:	0852      	lsrs	r2, r2, #1
 8000400:	4413      	add	r3, r2
 8000402:	0c5b      	lsrs	r3, r3, #17
 8000404:	61fb      	str	r3, [r7, #28]
        break;
 8000406:	e0a9      	b.n	800055c <getValue+0x280>

        case IOUT:
        	i_meas=0;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
			for (i=0;i<100;i++){
 800040c:	2300      	movs	r3, #0
 800040e:	82fb      	strh	r3, [r7, #22]
 8000410:	e01c      	b.n	800044c <getValue+0x170>
				ADC_Select_CH1();
 8000412:	f7ff feeb 	bl	80001ec <ADC_Select_CH1>
				HAL_ADC_Start(&hadc1);
 8000416:	4854      	ldr	r0, [pc, #336]	; (8000568 <getValue+0x28c>)
 8000418:	f000 ff90 	bl	800133c <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1,1000);
 800041c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000420:	4851      	ldr	r0, [pc, #324]	; (8000568 <getValue+0x28c>)
 8000422:	f001 f865 	bl	80014f0 <HAL_ADC_PollForConversion>
				i_meas = HAL_ADC_GetValue(&hadc1) + i_meas;
 8000426:	4850      	ldr	r0, [pc, #320]	; (8000568 <getValue+0x28c>)
 8000428:	f001 f968 	bl	80016fc <HAL_ADC_GetValue>
 800042c:	4602      	mov	r2, r0
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	4413      	add	r3, r2
 8000432:	61bb      	str	r3, [r7, #24]
				HAL_ADC_Stop(&hadc1);
 8000434:	484c      	ldr	r0, [pc, #304]	; (8000568 <getValue+0x28c>)
 8000436:	f001 f82f 	bl	8001498 <HAL_ADC_Stop>
				HAL_Delay(1);
 800043a:	2001      	movs	r0, #1
 800043c:	f000 fe82 	bl	8001144 <HAL_Delay>
			for (i=0;i<100;i++){
 8000440:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000444:	b29b      	uxth	r3, r3
 8000446:	3301      	adds	r3, #1
 8000448:	b29b      	uxth	r3, r3
 800044a:	82fb      	strh	r3, [r7, #22]
 800044c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000450:	2b63      	cmp	r3, #99	; 0x63
 8000452:	ddde      	ble.n	8000412 <getValue+0x136>
			}val_meas = i_meas / 100;
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	4a4b      	ldr	r2, [pc, #300]	; (8000584 <getValue+0x2a8>)
 8000458:	fba2 2303 	umull	r2, r3, r2, r3
 800045c:	095b      	lsrs	r3, r3, #5
 800045e:	61fb      	str	r3, [r7, #28]
            HAL_Delay(5);
 8000460:	2005      	movs	r0, #5
 8000462:	f000 fe6f 	bl	8001144 <HAL_Delay>
            i_offset = getValue(VINTRM)/2;
 8000466:	2002      	movs	r0, #2
 8000468:	f7ff ff38 	bl	80002dc <getValue>
 800046c:	4603      	mov	r3, r0
 800046e:	085b      	lsrs	r3, r3, #1
 8000470:	b29b      	uxth	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	4b44      	ldr	r3, [pc, #272]	; (8000588 <getValue+0x2ac>)
 8000476:	601a      	str	r2, [r3, #0]
            val_meas = (val_meas* V_REF * RDIV_N_3 ) / (N_BITS * RDIV_D_3);
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	4a44      	ldr	r2, [pc, #272]	; (800058c <getValue+0x2b0>)
 800047c:	fb02 f303 	mul.w	r3, r2, r3
 8000480:	4a43      	ldr	r2, [pc, #268]	; (8000590 <getValue+0x2b4>)
 8000482:	fba2 2303 	umull	r2, r3, r2, r3
 8000486:	0c5b      	lsrs	r3, r3, #17
 8000488:	61fb      	str	r3, [r7, #28]
            if (val_meas < i_offset)
 800048a:	4b3f      	ldr	r3, [pc, #252]	; (8000588 <getValue+0x2ac>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	69fa      	ldr	r2, [r7, #28]
 8000490:	429a      	cmp	r2, r3
 8000492:	d202      	bcs.n	800049a <getValue+0x1be>
                val_meas = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
			else val_meas = (val_meas - i_offset ) * 257 / 100;
        break;
 8000498:	e060      	b.n	800055c <getValue+0x280>
			else val_meas = (val_meas - i_offset ) * 257 / 100;
 800049a:	4b3b      	ldr	r3, [pc, #236]	; (8000588 <getValue+0x2ac>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	69fa      	ldr	r2, [r7, #28]
 80004a0:	1ad2      	subs	r2, r2, r3
 80004a2:	4613      	mov	r3, r2
 80004a4:	021b      	lsls	r3, r3, #8
 80004a6:	4413      	add	r3, r2
 80004a8:	4a36      	ldr	r2, [pc, #216]	; (8000584 <getValue+0x2a8>)
 80004aa:	fba2 2303 	umull	r2, r3, r2, r3
 80004ae:	095b      	lsrs	r3, r3, #5
 80004b0:	61fb      	str	r3, [r7, #28]
        break;
 80004b2:	e053      	b.n	800055c <getValue+0x280>
        case IIN:
			i_meas=0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
			for (i=0;i<100;i++){
 80004b8:	2300      	movs	r3, #0
 80004ba:	82fb      	strh	r3, [r7, #22]
 80004bc:	e019      	b.n	80004f2 <getValue+0x216>
				ADC_Select_CH0();
 80004be:	f7ff fe77 	bl	80001b0 <ADC_Select_CH0>
				HAL_ADC_Start(&hadc1);
 80004c2:	4829      	ldr	r0, [pc, #164]	; (8000568 <getValue+0x28c>)
 80004c4:	f000 ff3a 	bl	800133c <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1,1000);
 80004c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004cc:	4826      	ldr	r0, [pc, #152]	; (8000568 <getValue+0x28c>)
 80004ce:	f001 f80f 	bl	80014f0 <HAL_ADC_PollForConversion>
				i_meas = HAL_ADC_GetValue(&hadc1) + i_meas;
 80004d2:	4825      	ldr	r0, [pc, #148]	; (8000568 <getValue+0x28c>)
 80004d4:	f001 f912 	bl	80016fc <HAL_ADC_GetValue>
 80004d8:	4602      	mov	r2, r0
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	4413      	add	r3, r2
 80004de:	61bb      	str	r3, [r7, #24]
				HAL_ADC_Stop(&hadc1);
 80004e0:	4821      	ldr	r0, [pc, #132]	; (8000568 <getValue+0x28c>)
 80004e2:	f000 ffd9 	bl	8001498 <HAL_ADC_Stop>
			for (i=0;i<100;i++){
 80004e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	3301      	adds	r3, #1
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	82fb      	strh	r3, [r7, #22]
 80004f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004f6:	2b63      	cmp	r3, #99	; 0x63
 80004f8:	dde1      	ble.n	80004be <getValue+0x1e2>
				//HAL_Delay(1);
        	}val_meas = i_meas / 100;
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	4a21      	ldr	r2, [pc, #132]	; (8000584 <getValue+0x2a8>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	095b      	lsrs	r3, r3, #5
 8000504:	61fb      	str	r3, [r7, #28]
			i_offset = getValue(VINTRM)/2;
 8000506:	2002      	movs	r0, #2
 8000508:	f7ff fee8 	bl	80002dc <getValue>
 800050c:	4603      	mov	r3, r0
 800050e:	085b      	lsrs	r3, r3, #1
 8000510:	b29b      	uxth	r3, r3
 8000512:	461a      	mov	r2, r3
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <getValue+0x2ac>)
 8000516:	601a      	str	r2, [r3, #0]
			val_meas = (val_meas* V_REF * RDIV_N_2 ) / (N_BITS);
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	f641 12c8 	movw	r2, #6600	; 0x19c8
 800051e:	fb03 f202 	mul.w	r2, r3, r2
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <getValue+0x294>)
 8000524:	fba3 1302 	umull	r1, r3, r3, r2
 8000528:	1ad2      	subs	r2, r2, r3
 800052a:	0852      	lsrs	r2, r2, #1
 800052c:	4413      	add	r3, r2
 800052e:	0adb      	lsrs	r3, r3, #11
 8000530:	61fb      	str	r3, [r7, #28]
            if (val_meas < i_offset)
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <getValue+0x2ac>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	69fa      	ldr	r2, [r7, #28]
 8000538:	429a      	cmp	r2, r3
 800053a:	d202      	bcs.n	8000542 <getValue+0x266>
                val_meas = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
			else val_meas = (val_meas - i_offset ) * 177 / 50;
        break;
 8000540:	e00b      	b.n	800055a <getValue+0x27e>
			else val_meas = (val_meas - i_offset ) * 177 / 50;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <getValue+0x2ac>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	22b1      	movs	r2, #177	; 0xb1
 800054c:	fb02 f303 	mul.w	r3, r2, r3
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <getValue+0x2a8>)
 8000552:	fba2 2303 	umull	r2, r3, r2, r3
 8000556:	091b      	lsrs	r3, r3, #4
 8000558:	61fb      	str	r3, [r7, #28]
        break;
 800055a:	bf00      	nop
}
    return (uint16_t) val_meas;
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	b29b      	uxth	r3, r3
}
 8000560:	4618      	mov	r0, r3
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000090 	.word	0x20000090
 800056c:	cccccccd 	.word	0xcccccccd
 8000570:	00100101 	.word	0x00100101
 8000574:	0001f6bc 	.word	0x0001f6bc
 8000578:	ccd99a67 	.word	0xccd99a67
 800057c:	00042dec 	.word	0x00042dec
 8000580:	7d1dc5f5 	.word	0x7d1dc5f5
 8000584:	51eb851f 	.word	0x51eb851f
 8000588:	200000c0 	.word	0x200000c0
 800058c:	0007ce0c 	.word	0x0007ce0c
 8000590:	51f0a429 	.word	0x51f0a429

08000594 <BUCK_init>:
#include "DR_Buck.h"           


void BUCK_init (void){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    setduty (BUCK_IN , 0);
 8000598:	2100      	movs	r1, #0
 800059a:	2001      	movs	r0, #1
 800059c:	f000 f824 	bl	80005e8 <setduty>
    setduty (BUCK_OUT , 0);
 80005a0:	2100      	movs	r1, #0
 80005a2:	2002      	movs	r0, #2
 80005a4:	f000 f820 	bl	80005e8 <setduty>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <getduty>:

uint16_t getduty(int8_t buck){
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
    uint16_t aux;
    uint16_t duty;
    switch (buck){
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d005      	beq.n	80005ca <getduty+0x1e>
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d107      	bne.n	80005d2 <getduty+0x26>
        case BUCK_OUT:
            aux = TIM3->CCR2;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <getduty+0x38>)
 80005c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005c6:	81fb      	strh	r3, [r7, #14]
            break;
 80005c8:	e003      	b.n	80005d2 <getduty+0x26>
        case BUCK_IN:
            aux = TIM3->CCR1;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <getduty+0x38>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ce:	81fb      	strh	r3, [r7, #14]
            break;
 80005d0:	bf00      	nop
    }duty = aux;
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	81bb      	strh	r3, [r7, #12]
    return duty;
 80005d6:	89bb      	ldrh	r3, [r7, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40000400 	.word	0x40000400

080005e8 <setduty>:

void setduty (int8_t selection , int16_t duty){
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
    uint16_t aux;

    switch (selection){
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d006      	beq.n	800060e <setduty+0x26>
 8000600:	2b02      	cmp	r3, #2
 8000602:	d109      	bne.n	8000618 <setduty+0x30>
        case BUCK_OUT:
            TIM3->CCR2 = duty;
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <setduty+0x3c>)
 8000606:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800060a:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 800060c:	e004      	b.n	8000618 <setduty+0x30>
        case BUCK_IN:
            TIM3->CCR1 = duty;
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <setduty+0x3c>)
 8000610:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000614:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8000616:	bf00      	nop
    }
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40000400 	.word	0x40000400

08000628 <Mde_MPPT_Out>:
#define IDDLE_TIME 100 // in ms


uint8_t tflag_out=0;

void Mde_MPPT_Out(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
    static int8_t state = SCAN;
    int16_t vout_m=0, iout_m=0;
 800062e:	2300      	movs	r3, #0
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	2300      	movs	r3, #0
 8000634:	80bb      	strh	r3, [r7, #4]
    switch (state){
 8000636:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <Mde_MPPT_Out+0xd0>)
 8000638:	f993 3000 	ldrsb.w	r3, [r3]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <Mde_MPPT_Out+0x1e>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d03f      	beq.n	80006c4 <Mde_MPPT_Out+0x9c>
 8000644:	e049      	b.n	80006da <Mde_MPPT_Out+0xb2>
        case SCAN:
            vout_m = getValue (VOUT);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fe48 	bl	80002dc <getValue>
 800064c:	4603      	mov	r3, r0
 800064e:	80fb      	strh	r3, [r7, #6]
            iout_m = getValue (IOUT);
 8000650:	2003      	movs	r0, #3
 8000652:	f7ff fe43 	bl	80002dc <getValue>
 8000656:	4603      	mov	r3, r0
 8000658:	80bb      	strh	r3, [r7, #4]

            if (vout_m > VOUT_MAX || iout_m > IOUT_MAX){
 800065a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800065e:	f241 025e 	movw	r2, #4190	; 0x105e
 8000662:	4293      	cmp	r3, r2
 8000664:	dc04      	bgt.n	8000670 <Mde_MPPT_Out+0x48>
 8000666:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800066a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800066e:	dd0e      	ble.n	800068e <Mde_MPPT_Out+0x66>
                duty_out_dec(vout_m, iout_m);
 8000670:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f84e 	bl	800071c <duty_out_dec>
                if (iout_m < IOUT_MIN)
 8000680:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000684:	2b13      	cmp	r3, #19
 8000686:	dc0a      	bgt.n	800069e <Mde_MPPT_Out+0x76>
                    duty_out_off();
 8000688:	f000 f8cb 	bl	8000822 <duty_out_off>
                if (iout_m < IOUT_MIN)
 800068c:	e007      	b.n	800069e <Mde_MPPT_Out+0x76>
            }else duty_out_inc(vout_m, iout_m);
 800068e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f881 	bl	80007a0 <duty_out_inc>
            if (vout_m < 2500)
 800069e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80006a6:	4293      	cmp	r3, r2
 80006a8:	dc01      	bgt.n	80006ae <Mde_MPPT_Out+0x86>
				duty_out_off();
 80006aa:	f000 f8ba 	bl	8000822 <duty_out_off>
            TimerStart (0,IDDLE_TIME_OUT,&T_Hand_Out);
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <Mde_MPPT_Out+0xd4>)
 80006b0:	21c8      	movs	r1, #200	; 0xc8
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f8c4 	bl	8000840 <TimerStart>
            serial_send_4();
 80006b8:	f000 f940 	bl	800093c <serial_send_4>
            state=IDDLE;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <Mde_MPPT_Out+0xd0>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
            break;
 80006c2:	e014      	b.n	80006ee <Mde_MPPT_Out+0xc6>
        case IDDLE:
            if (tflag_out==1){
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <Mde_MPPT_Out+0xd8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10f      	bne.n	80006ec <Mde_MPPT_Out+0xc4>
                tflag_out=0;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <Mde_MPPT_Out+0xd8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
                state=SCAN;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <Mde_MPPT_Out+0xd0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
            }break;
 80006d8:	e008      	b.n	80006ec <Mde_MPPT_Out+0xc4>
        default: 
            TimerStart (0,IDDLE_TIME_OUT,&T_Hand_Out);
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <Mde_MPPT_Out+0xd4>)
 80006dc:	21c8      	movs	r1, #200	; 0xc8
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f8ae 	bl	8000840 <TimerStart>
            state=IDDLE;
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <Mde_MPPT_Out+0xd0>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
    }
}
 80006ea:	e000      	b.n	80006ee <Mde_MPPT_Out+0xc6>
            }break;
 80006ec:	bf00      	nop
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000c5 	.word	0x200000c5
 80006fc:	08000705 	.word	0x08000705
 8000700:	200000c4 	.word	0x200000c4

08000704 <T_Hand_Out>:

void T_Hand_Out(void){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
    tflag_out=1;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <T_Hand_Out+0x14>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	200000c4 	.word	0x200000c4

0800071c <duty_out_dec>:

#define DUTY_DELTA_IN 2
#define DUTY_DELTA_OUT 2


void duty_out_dec (int16_t vout_m, int16_t iout_m){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	80fb      	strh	r3, [r7, #6]
 8000728:	4613      	mov	r3, r2
 800072a:	80bb      	strh	r3, [r7, #4]

    uint16_t act_duty, nxt_duty;
    uint16_t delta_duty = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	81bb      	strh	r3, [r7, #12]
    act_duty = getduty(BUCK_OUT);
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff ff3b 	bl	80005ac <getduty>
 8000736:	4603      	mov	r3, r0
 8000738:	817b      	strh	r3, [r7, #10]

    if (iout_m > 600)
 800073a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800073e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000742:	dd02      	ble.n	800074a <duty_out_dec+0x2e>
        	delta_duty = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	81bb      	strh	r3, [r7, #12]
 8000748:	e001      	b.n	800074e <duty_out_dec+0x32>
        	else delta_duty =2;
 800074a:	2302      	movs	r3, #2
 800074c:	81bb      	strh	r3, [r7, #12]
        if (iout_m > 700)
 800074e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000752:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000756:	dd01      	ble.n	800075c <duty_out_dec+0x40>
            delta_duty = 14;
 8000758:	230e      	movs	r3, #14
 800075a:	81bb      	strh	r3, [r7, #12]
        if (iout_m > 800)
 800075c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000760:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000764:	dd01      	ble.n	800076a <duty_out_dec+0x4e>
            delta_duty = 22;
 8000766:	2316      	movs	r3, #22
 8000768:	81bb      	strh	r3, [r7, #12]
        if (iout_m > 900)
 800076a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800076e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000772:	dd01      	ble.n	8000778 <duty_out_dec+0x5c>
            delta_duty = 29;
 8000774:	231d      	movs	r3, #29
 8000776:	81bb      	strh	r3, [r7, #12]
     nxt_duty = act_duty - delta_duty;
 8000778:	897a      	ldrh	r2, [r7, #10]
 800077a:	89bb      	ldrh	r3, [r7, #12]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	81fb      	strh	r3, [r7, #14]
    if (nxt_duty > 360)
 8000780:	89fb      	ldrh	r3, [r7, #14]
 8000782:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000786:	d901      	bls.n	800078c <duty_out_dec+0x70>
        nxt_duty = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	81fb      	strh	r3, [r7, #14]
    setduty(BUCK_OUT,nxt_duty);
 800078c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000790:	4619      	mov	r1, r3
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff ff28 	bl	80005e8 <setduty>
        nxt_duty = (100*act_duty) / vout_rel;
        
    }else nxt_duty = (IOUT_K*act_duty) / vout_rel;
    setduty(BUCK_OUT,nxt_duty);
    */
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <duty_out_inc>:

void duty_out_inc (int16_t vout_m, int16_t iout_m){ 
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	4613      	mov	r3, r2
 80007ae:	80bb      	strh	r3, [r7, #4]
    uint16_t act_duty, nxt_duty;
    uint16_t delta_duty = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	81bb      	strh	r3, [r7, #12]
    if (iout_m < 400)
 80007b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007bc:	da02      	bge.n	80007c4 <duty_out_inc+0x24>
    	delta_duty = 7;
 80007be:	2307      	movs	r3, #7
 80007c0:	81bb      	strh	r3, [r7, #12]
 80007c2:	e001      	b.n	80007c8 <duty_out_inc+0x28>
    	else delta_duty =2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	81bb      	strh	r3, [r7, #12]
    if (iout_m < 300)
 80007c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007d0:	da01      	bge.n	80007d6 <duty_out_inc+0x36>
        delta_duty = 14;
 80007d2:	230e      	movs	r3, #14
 80007d4:	81bb      	strh	r3, [r7, #12]
    if (iout_m < 200)
 80007d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007da:	2bc7      	cmp	r3, #199	; 0xc7
 80007dc:	dc01      	bgt.n	80007e2 <duty_out_inc+0x42>
        delta_duty = 22;
 80007de:	2316      	movs	r3, #22
 80007e0:	81bb      	strh	r3, [r7, #12]
    if (iout_m < 100)
 80007e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007e6:	2b63      	cmp	r3, #99	; 0x63
 80007e8:	dc01      	bgt.n	80007ee <duty_out_inc+0x4e>
        delta_duty = 29;
 80007ea:	231d      	movs	r3, #29
 80007ec:	81bb      	strh	r3, [r7, #12]
    act_duty = getduty(BUCK_OUT);
 80007ee:	2002      	movs	r0, #2
 80007f0:	f7ff fedc 	bl	80005ac <getduty>
 80007f4:	4603      	mov	r3, r0
 80007f6:	817b      	strh	r3, [r7, #10]
    nxt_duty = act_duty + delta_duty;
 80007f8:	897a      	ldrh	r2, [r7, #10]
 80007fa:	89bb      	ldrh	r3, [r7, #12]
 80007fc:	4413      	add	r3, r2
 80007fe:	81fb      	strh	r3, [r7, #14]
    if (nxt_duty > 360)
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000806:	d902      	bls.n	800080e <duty_out_inc+0x6e>
        nxt_duty = 360;
 8000808:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800080c:	81fb      	strh	r3, [r7, #14]
    setduty(BUCK_OUT,nxt_duty);
 800080e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000812:	4619      	mov	r1, r3
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff fee7 	bl	80005e8 <setduty>
    }else nxt_duty = (IOUT_K*act_duty) / iout_rel;
    if (nxt_duty > 100)
        nxt_duty = 100;
    setduty(BUCK_OUT,nxt_duty);
    */
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <duty_out_off>:

void duty_out_off(){
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
    uint16_t nxt_duty=0;
 8000828:	2300      	movs	r3, #0
 800082a:	80fb      	strh	r3, [r7, #6]
    setduty(BUCK_OUT,nxt_duty);
 800082c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000830:	4619      	mov	r1, r3
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff fed8 	bl	80005e8 <setduty>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <TimerStart>:

uint32_t timer[MAX_T];
uint8_t flag_timer[MAX_T];
void ( * handler_timer[MAX_T])(void);

void TimerStart(uint8_t ntimer,uint32_t time, void (*handler) (void)){
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	73fb      	strb	r3, [r7, #15]
	timer[ntimer]=time;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	4908      	ldr	r1, [pc, #32]	; (8000874 <TimerStart+0x34>)
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	handler_timer[ntimer]=handler;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	4907      	ldr	r1, [pc, #28]	; (8000878 <TimerStart+0x38>)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	flag_timer[ntimer]=0;
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	4a05      	ldr	r2, [pc, #20]	; (800087c <TimerStart+0x3c>)
 8000866:	2100      	movs	r1, #0
 8000868:	54d1      	strb	r1, [r2, r3]
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	200000c8 	.word	0x200000c8
 8000878:	200000d8 	.word	0x200000d8
 800087c:	200000d4 	.word	0x200000d4

08000880 <TimerEvent>:

void TimerEvent(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<MAX_T;i++){
 8000886:	2300      	movs	r3, #0
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	e010      	b.n	80008ae <TimerEvent+0x2e>
		if (flag_timer[i]==1){
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <TimerEvent+0x40>)
 8000890:	5cd3      	ldrb	r3, [r2, r3]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d108      	bne.n	80008a8 <TimerEvent+0x28>
			flag_timer[i]=0;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <TimerEvent+0x40>)
 800089a:	2100      	movs	r1, #0
 800089c:	54d1      	strb	r1, [r2, r3]
			handler_timer[i]();
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <TimerEvent+0x44>)
 80008a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a6:	4798      	blx	r3
	for (uint8_t i=0;i<MAX_T;i++){
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3301      	adds	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d9eb      	bls.n	800088c <TimerEvent+0xc>
		}
	}
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000d4 	.word	0x200000d4
 80008c4:	200000d8 	.word	0x200000d8

080008c8 <HAL_IncTick>:


/*El SysTick esta configurado en 1 mS por default en HAL_Init()*/
void HAL_IncTick(void){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_IncTick+0x64>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_IncTick+0x68>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <HAL_IncTick+0x68>)
 80008dc:	6013      	str	r3, [r2, #0]
	for (uint8_t i=0; i<MAX_T; i++){
 80008de:	2300      	movs	r3, #0
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	e01a      	b.n	800091a <HAL_IncTick+0x52>
		if(timer[i]!=0){
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <HAL_IncTick+0x6c>)
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d011      	beq.n	8000914 <HAL_IncTick+0x4c>
			timer[i]--;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_IncTick+0x6c>)
 80008f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f8:	3a01      	subs	r2, #1
 80008fa:	490e      	ldr	r1, [pc, #56]	; (8000934 <HAL_IncTick+0x6c>)
 80008fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer[i]==0)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <HAL_IncTick+0x6c>)
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d103      	bne.n	8000914 <HAL_IncTick+0x4c>
				flag_timer[i]=1;
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_IncTick+0x70>)
 8000910:	2101      	movs	r1, #1
 8000912:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<MAX_T; i++){
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	3301      	adds	r3, #1
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d9e1      	bls.n	80008e4 <HAL_IncTick+0x1c>
		}
	}
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	2000000c 	.word	0x2000000c
 8000930:	20000178 	.word	0x20000178
 8000934:	200000c8 	.word	0x200000c8
 8000938:	200000d4 	.word	0x200000d4

0800093c <serial_send_4>:
#include "debug.h"

#define DUTY1 180
#define DUTY2 180

void serial_send_4(void){
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	b09b      	sub	sp, #108	; 0x6c
 8000940:	af04      	add	r7, sp, #16
    char bufferTxServer[70];
    int16_t ADC_VAL[5];
    uint16_t duty[2];
    int8_t k=0;
 8000942:	2300      	movs	r3, #0
 8000944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    for (k=0;k<70;k++){
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800094e:	e00d      	b.n	800096c <serial_send_4+0x30>
        bufferTxServer[k] = '\0';
 8000950:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000954:	3358      	adds	r3, #88	; 0x58
 8000956:	443b      	add	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	f803 2c48 	strb.w	r2, [r3, #-72]
    for (k=0;k<70;k++){
 800095e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000962:	b2db      	uxtb	r3, r3
 8000964:	3301      	adds	r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800096c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000970:	2b45      	cmp	r3, #69	; 0x45
 8000972:	dded      	ble.n	8000950 <serial_send_4+0x14>
    }
    ADC_VAL[VOUT] = getValue(VOUT);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fcb1 	bl	80002dc <getValue>
 800097a:	4603      	mov	r3, r0
 800097c:	b21b      	sxth	r3, r3
 800097e:	80bb      	strh	r3, [r7, #4]
    ADC_VAL[VIN] = getValue(VIN);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fcab 	bl	80002dc <getValue>
 8000986:	4603      	mov	r3, r0
 8000988:	b21b      	sxth	r3, r3
 800098a:	80fb      	strh	r3, [r7, #6]
    ADC_VAL[IOUT] = getValue(IOUT);
 800098c:	2003      	movs	r0, #3
 800098e:	f7ff fca5 	bl	80002dc <getValue>
 8000992:	4603      	mov	r3, r0
 8000994:	b21b      	sxth	r3, r3
 8000996:	817b      	strh	r3, [r7, #10]
    ADC_VAL[IIN] = getValue(IIN);
 8000998:	2004      	movs	r0, #4
 800099a:	f7ff fc9f 	bl	80002dc <getValue>
 800099e:	4603      	mov	r3, r0
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	81bb      	strh	r3, [r7, #12]
    duty[0] = (getduty(BUCK_IN)*1000)/PERIOD;
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fe01 	bl	80005ac <getduty>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fb02 f303 	mul.w	r3, r2, r3
 80009b6:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <serial_send_4+0x104>)
 80009b8:	fb82 1203 	smull	r1, r2, r2, r3
 80009bc:	441a      	add	r2, r3
 80009be:	1212      	asrs	r2, r2, #8
 80009c0:	17db      	asrs	r3, r3, #31
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	803b      	strh	r3, [r7, #0]
    duty[1] = (getduty(BUCK_OUT)*1000)/PERIOD;
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fdef 	bl	80005ac <getduty>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <serial_send_4+0x104>)
 80009dc:	fb82 1203 	smull	r1, r2, r2, r3
 80009e0:	441a      	add	r2, r3
 80009e2:	1212      	asrs	r2, r2, #8
 80009e4:	17db      	asrs	r3, r3, #31
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	807b      	strh	r3, [r7, #2]
    sprintf(bufferTxServer, "{\"vin\":%d,\"vmed\":0,\"vout\":%d,\"cin\":%d,\"cout\":%d,\"d1\":%d,\"d2\":%d}\n",
            ADC_VAL[VIN],
 80009ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    sprintf(bufferTxServer, "{\"vin\":%d,\"vmed\":0,\"vout\":%d,\"cin\":%d,\"cout\":%d,\"d1\":%d,\"d2\":%d}\n",
 80009f0:	461d      	mov	r5, r3
            ADC_VAL[VOUT],
 80009f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    sprintf(bufferTxServer, "{\"vin\":%d,\"vmed\":0,\"vout\":%d,\"cin\":%d,\"cout\":%d,\"d1\":%d,\"d2\":%d}\n",
 80009f6:	461e      	mov	r6, r3
            ADC_VAL[IIN],
 80009f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
            ADC_VAL[IOUT],
 80009fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
            duty[0],
 8000a00:	8839      	ldrh	r1, [r7, #0]
            duty[1]);
 8000a02:	8878      	ldrh	r0, [r7, #2]
    sprintf(bufferTxServer, "{\"vin\":%d,\"vmed\":0,\"vout\":%d,\"cin\":%d,\"cout\":%d,\"d1\":%d,\"d2\":%d}\n",
 8000a04:	4604      	mov	r4, r0
 8000a06:	f107 0010 	add.w	r0, r7, #16
 8000a0a:	9403      	str	r4, [sp, #12]
 8000a0c:	9102      	str	r1, [sp, #8]
 8000a0e:	9201      	str	r2, [sp, #4]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	4633      	mov	r3, r6
 8000a14:	462a      	mov	r2, r5
 8000a16:	490b      	ldr	r1, [pc, #44]	; (8000a44 <serial_send_4+0x108>)
 8000a18:	f003 f8ac 	bl	8003b74 <siprintf>
    HAL_UART_Transmit(&huart1, bufferTxServer, strlen(bufferTxServer), 100);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fb93 	bl	800014c <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f107 0110 	add.w	r1, r7, #16
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <serial_send_4+0x10c>)
 8000a32:	f002 feed 	bl	8003810 <HAL_UART_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	375c      	adds	r7, #92	; 0x5c
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	b60b60b7 	.word	0xb60b60b7
 8000a44:	08004480 	.word	0x08004480
 8000a48:	2000012c 	.word	0x2000012c

08000a4c <debug_function_3>:
void debug_function_2 (void){
    Mde_MPPT_In();
    serial_send_2();
}

void debug_function_3(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    TIM3->CCR1 = DUTY1;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <debug_function_3+0x14>)
 8000a52:	22b4      	movs	r2, #180	; 0xb4
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
    Mde_MPPT_Out();
 8000a56:	f7ff fde7 	bl	8000628 <Mde_MPPT_Out>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40000400 	.word	0x40000400

08000a64 <T_Led_Out>:
void T_Led_Out(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void T_Led_Out(void){
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  flag_led=1;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <T_Led_Out+0x14>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000000 	.word	0x20000000

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a80:	f000 fb10 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a84:	f000 f830 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a88:	f000 f938 	bl	8000cfc <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a8c:	f000 f888 	bl	8000ba0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a90:	f7ff fb64 	bl	800015c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a94:	f000 f908 	bl	8000ca8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <main+0x5c>)
 8000a9c:	f002 f93a 	bl	8002d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <main+0x5c>)
 8000aa4:	f002 f936 	bl	8002d14 <HAL_TIM_PWM_Start>
  BUCK_init ();
 8000aa8:	f7ff fd74 	bl	8000594 <BUCK_init>
			  flag_led = 0;
			  TimerStart(1,L_PERIOD,&T_Led_Out);
		  }
    }
    else if (DEBUG_MODE == 3){
      if (flag_led == 1){
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <main+0x60>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d10d      	bne.n	8000ad0 <main+0x54>
        debug_function_3();
 8000ab4:	f7ff ffca 	bl	8000a4c <debug_function_3>
        flag_led=0;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <main+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
        TimerStart(1,L_PERIOD,&T_Led_Out);
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <main+0x64>)
 8000ac0:	2132      	movs	r1, #50	; 0x32
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f7ff febc 	bl	8000840 <TimerStart>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <main+0x68>)
 8000acc:	f001 fae4 	bl	8002098 <HAL_GPIO_TogglePin>
      }
    }
    else{
      Mde_MPPT_Out();
    }
    TimerEvent();
 8000ad0:	f7ff fed6 	bl	8000880 <TimerEvent>
	  if (DEBUG_MODE == 1){
 8000ad4:	e7ea      	b.n	8000aac <main+0x30>
 8000ad6:	bf00      	nop
 8000ad8:	200000e4 	.word	0x200000e4
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	08000a65 	.word	0x08000a65
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	; 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af2:	2228      	movs	r2, #40	; 0x28
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 f834 	bl	8003b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b26:	2301      	movs	r3, #1
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fac4 	bl	80020cc <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b4a:	f000 f921 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fd30 	bl	80025d0 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b76:	f000 f90b 	bl	8000d90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b82:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 feb0 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b92:	f000 f8fd 	bl	8000d90 <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3750      	adds	r7, #80	; 0x50
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_TIM3_Init>:
//   * @brief TIM3 Initialization Function
//   * @param None
//   * @retval None
//   */
static void MX_TIM3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000bd2:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <MX_TIM3_Init+0x104>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360;
 8000be2:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000be4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000be8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bf6:	482a      	ldr	r0, [pc, #168]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000bf8:	f001 ffe4 	bl	8002bc4 <HAL_TIM_Base_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c02:	f000 f8c5 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000c14:	f002 f9e2 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c1e:	f000 f8b7 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c22:	481f      	ldr	r0, [pc, #124]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000c24:	f002 f81d 	bl	8002c62 <HAL_TIM_PWM_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c2e:	f000 f8af 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000c42:	f002 fd37 	bl	80036b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c4c:	f000 f8a0 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c50:	2360      	movs	r3, #96	; 0x60
 8000c52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 8000c54:	2396      	movs	r3, #150	; 0x96
 8000c56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	4619      	mov	r1, r3
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000c68:	f002 f8f6 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c72:	f000 f88d 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000c82:	f002 f8e9 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000c8c:	f000 f880 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <MX_TIM3_Init+0x100>)
 8000c92:	f000 f8ff 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 8000c96:	bf00      	nop
 8000c98:	3738      	adds	r7, #56	; 0x38
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000e4 	.word	0x200000e4
 8000ca4:	40000400 	.word	0x40000400

08000ca8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_USART1_UART_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000ce0:	f002 fd46 	bl	8003770 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cea:	f000 f851 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000012c 	.word	0x2000012c
 8000cf8:	40013800 	.word	0x40013800

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d16:	f043 0320 	orr.w	r3, r3, #32
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();   
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_GPIO_Init+0x90>)
 8000d5e:	f001 f983 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d62:	2303      	movs	r3, #3
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0x90>)
 8000d7a:	f000 fff1 	bl	8001d60 <HAL_GPIO_Init>

}
 8000d7e:	bf00      	nop
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x40>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_MspInit+0x40>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_MspInit+0x40>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x40>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_MspInit+0x40>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_MspInit+0x40>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_ADC_MspInit+0x6c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d121      	bne.n	8000e44 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e30:	231f      	movs	r3, #31
 8000e32:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e34:	2303      	movs	r3, #3
 8000e36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_ADC_MspInit+0x74>)
 8000e40:	f000 ff8e 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012400 	.word	0x40012400
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010800 	.word	0x40010800

08000e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_TIM_Base_MspInit+0x34>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10b      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_TIM_Base_MspInit+0x38>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_TIM_Base_MspInit+0x38>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_TIM_Base_MspInit+0x38>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_TIM_MspPostInit+0x58>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d117      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_TIM_MspPostInit+0x5c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_TIM_MspPostInit+0x5c>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_TIM_MspPostInit+0x5c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ecc:	23c0      	movs	r3, #192	; 0xc0
 8000ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_TIM_MspPostInit+0x60>)
 8000ee0:	f000 ff3e 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40000400 	.word	0x40000400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_UART_MspInit+0x8c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d131      	bne.n	8000f7c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_UART_MspInit+0x90>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <HAL_UART_MspInit+0x90>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_MspInit+0x90>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0x90>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_UART_MspInit+0x90>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_UART_MspInit+0x90>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <HAL_UART_MspInit+0x94>)
 8000f5e:	f000 feff 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_MspInit+0x94>)
 8000f78:	f000 fef2 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010800 	.word	0x40010800

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd6:	f7ff fc77 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f002 fd7e 	bl	8003b10 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20005000 	.word	0x20005000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000174 	.word	0x20000174
 8001048:	20000190 	.word	0x20000190

0800104c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001058:	f7ff fff8 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800105e:	490c      	ldr	r1, [pc, #48]	; (8001090 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001060:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001074:	4c09      	ldr	r4, [pc, #36]	; (800109c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001082:	f002 fd4b 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001086:	f7ff fcf9 	bl	8000a7c <main>
  bx lr
 800108a:	4770      	bx	lr
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001094:	08004560 	.word	0x08004560
  ldr r2, =_sbss
 8001098:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800109c:	2000018c 	.word	0x2000018c

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_Init+0x28>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x28>)
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 fe1f 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	200f      	movs	r0, #15
 80010bc:	f000 f808 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c0:	f7ff fe6c 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fe29 	bl	8001d46 <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 fdff 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000004 	.word	0x20000004
 8001128:	2000000c 	.word	0x2000000c
 800112c:	20000008 	.word	0x20000008

08001130 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b02      	ldr	r3, [pc, #8]	; (8001140 <HAL_GetTick+0x10>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000178 	.word	0x20000178

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff fff0 	bl	8001130 <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffe0 	bl	8001130 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000000c 	.word	0x2000000c

0800118c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0be      	b.n	800132c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fe08 	bl	8000de0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fbf1 	bl	80019b8 <ADC_ConversionStop_Disable>
 80011d6:	4603      	mov	r3, r0
 80011d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 8099 	bne.w	800131a <HAL_ADC_Init+0x18e>
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 8095 	bne.w	800131a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011f8:	f023 0302 	bic.w	r3, r3, #2
 80011fc:	f043 0202 	orr.w	r2, r3, #2
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800120c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7b1b      	ldrb	r3, [r3, #12]
 8001212:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001214:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	4313      	orrs	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001224:	d003      	beq.n	800122e <HAL_ADC_Init+0xa2>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_ADC_Init+0xa8>
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	e000      	b.n	8001236 <HAL_ADC_Init+0xaa>
 8001234:	2300      	movs	r3, #0
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7d1b      	ldrb	r3, [r3, #20]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d119      	bne.n	8001278 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7b1b      	ldrb	r3, [r3, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d109      	bne.n	8001260 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	3b01      	subs	r3, #1
 8001252:	035a      	lsls	r2, r3, #13
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	e00b      	b.n	8001278 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	f043 0220 	orr.w	r2, r3, #32
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	430a      	orrs	r2, r1
 800128a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_ADC_Init+0x1a8>)
 8001294:	4013      	ands	r3, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	430b      	orrs	r3, r1
 800129e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a8:	d003      	beq.n	80012b2 <HAL_ADC_Init+0x126>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d104      	bne.n	80012bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_ADC_Init+0x1ac>)
 80012d8:	4013      	ands	r3, r2
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d10b      	bne.n	80012f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f6:	e018      	b.n	800132a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	f023 0312 	bic.w	r3, r3, #18
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001318:	e007      	b.n	800132a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	f043 0210 	orr.w	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800132a:	7dfb      	ldrb	r3, [r7, #23]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	ffe1f7fd 	.word	0xffe1f7fd
 8001338:	ff1f0efe 	.word	0xff1f0efe

0800133c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Start+0x1a>
 8001352:	2302      	movs	r3, #2
 8001354:	e098      	b.n	8001488 <HAL_ADC_Start+0x14c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fad0 	bl	8001904 <ADC_Enable>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f040 8087 	bne.w	800147e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a41      	ldr	r2, [pc, #260]	; (8001490 <HAL_ADC_Start+0x154>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d105      	bne.n	800139a <HAL_ADC_Start+0x5e>
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_ADC_Start+0x158>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d115      	bne.n	80013c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d026      	beq.n	8001402 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013c4:	e01d      	b.n	8001402 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <HAL_ADC_Start+0x158>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d004      	beq.n	80013e6 <HAL_ADC_Start+0xaa>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a2b      	ldr	r2, [pc, #172]	; (8001490 <HAL_ADC_Start+0x154>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10d      	bne.n	8001402 <HAL_ADC_Start+0xc6>
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_Start+0x158>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	f023 0206 	bic.w	r2, r3, #6
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
 800141a:	e002      	b.n	8001422 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f06f 0202 	mvn.w	r2, #2
 8001432:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800143e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001442:	d113      	bne.n	800146c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001448:	4a11      	ldr	r2, [pc, #68]	; (8001490 <HAL_ADC_Start+0x154>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d105      	bne.n	800145a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_ADC_Start+0x158>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001456:	2b00      	cmp	r3, #0
 8001458:	d108      	bne.n	800146c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e00c      	b.n	8001486 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e003      	b.n	8001486 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40012800 	.word	0x40012800
 8001494:	40012400 	.word	0x40012400

08001498 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Stop+0x1a>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e01a      	b.n	80014e8 <HAL_ADC_Stop+0x50>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fa7c 	bl	80019b8 <ADC_ConversionStop_Disable>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001506:	f7ff fe13 	bl	8001130 <HAL_GetTick>
 800150a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	f043 0220 	orr.w	r2, r3, #32
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0d3      	b.n	80016da <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d131      	bne.n	80015a4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800154a:	2b00      	cmp	r3, #0
 800154c:	d12a      	bne.n	80015a4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800154e:	e021      	b.n	8001594 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001556:	d01d      	beq.n	8001594 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <HAL_ADC_PollForConversion+0x7e>
 800155e:	f7ff fde7 	bl	8001130 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d212      	bcs.n	8001594 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10b      	bne.n	8001594 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	f043 0204 	orr.w	r2, r3, #4
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0a2      	b.n	80016da <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0d6      	beq.n	8001550 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015a2:	e070      	b.n	8001686 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015a4:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <HAL_ADC_PollForConversion+0x1f4>)
 80015a6:	681c      	ldr	r4, [r3, #0]
 80015a8:	2002      	movs	r0, #2
 80015aa:	f001 fa55 	bl	8002a58 <HAL_RCCEx_GetPeriphCLKFreq>
 80015ae:	4603      	mov	r3, r0
 80015b0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6919      	ldr	r1, [r3, #16]
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <HAL_ADC_PollForConversion+0x1f8>)
 80015bc:	400b      	ands	r3, r1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_ADC_PollForConversion+0x104>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68d9      	ldr	r1, [r3, #12]
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <HAL_ADC_PollForConversion+0x1fc>)
 80015ca:	400b      	ands	r3, r1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <HAL_ADC_PollForConversion+0x104>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <HAL_ADC_PollForConversion+0x200>)
 80015d8:	400b      	ands	r3, r1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d108      	bne.n	80015f0 <HAL_ADC_PollForConversion+0x100>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68d9      	ldr	r1, [r3, #12]
 80015e4:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <HAL_ADC_PollForConversion+0x204>)
 80015e6:	400b      	ands	r3, r1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_PollForConversion+0x100>
 80015ec:	2314      	movs	r3, #20
 80015ee:	e020      	b.n	8001632 <HAL_ADC_PollForConversion+0x142>
 80015f0:	2329      	movs	r3, #41	; 0x29
 80015f2:	e01e      	b.n	8001632 <HAL_ADC_PollForConversion+0x142>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6919      	ldr	r1, [r3, #16]
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <HAL_ADC_PollForConversion+0x200>)
 80015fc:	400b      	ands	r3, r1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_ADC_PollForConversion+0x120>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68d9      	ldr	r1, [r3, #12]
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <HAL_ADC_PollForConversion+0x204>)
 800160a:	400b      	ands	r3, r1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00d      	beq.n	800162c <HAL_ADC_PollForConversion+0x13c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_ADC_PollForConversion+0x208>)
 8001618:	400b      	ands	r3, r1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d108      	bne.n	8001630 <HAL_ADC_PollForConversion+0x140>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68d9      	ldr	r1, [r3, #12]
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_ADC_PollForConversion+0x208>)
 8001626:	400b      	ands	r3, r1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_ADC_PollForConversion+0x140>
 800162c:	2354      	movs	r3, #84	; 0x54
 800162e:	e000      	b.n	8001632 <HAL_ADC_PollForConversion+0x142>
 8001630:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001638:	e021      	b.n	800167e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d01a      	beq.n	8001678 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_ADC_PollForConversion+0x168>
 8001648:	f7ff fd72 	bl	8001130 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d20f      	bcs.n	8001678 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d90b      	bls.n	8001678 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f043 0204 	orr.w	r2, r3, #4
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e030      	b.n	80016da <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	429a      	cmp	r2, r3
 8001684:	d8d9      	bhi.n	800163a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f06f 0212 	mvn.w	r2, #18
 800168e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016aa:	d115      	bne.n	80016d8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d111      	bne.n	80016d8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000004 	.word	0x20000004
 80016e8:	24924924 	.word	0x24924924
 80016ec:	00924924 	.word	0x00924924
 80016f0:	12492492 	.word	0x12492492
 80016f4:	00492492 	.word	0x00492492
 80016f8:	00249249 	.word	0x00249249

080016fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x20>
 8001730:	2302      	movs	r3, #2
 8001732:	e0dc      	b.n	80018ee <HAL_ADC_ConfigChannel+0x1da>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d81c      	bhi.n	800177e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b05      	subs	r3, #5
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b05      	subs	r3, #5
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
 800177c:	e03c      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d81c      	bhi.n	80017c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b23      	subs	r3, #35	; 0x23
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	4019      	ands	r1, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b23      	subs	r3, #35	; 0x23
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	631a      	str	r2, [r3, #48]	; 0x30
 80017be:	e01b      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b41      	subs	r3, #65	; 0x41
 80017d2:	221f      	movs	r2, #31
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	4019      	ands	r1, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b41      	subs	r3, #65	; 0x41
 80017ec:	fa00 f203 	lsl.w	r2, r0, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d91c      	bls.n	800183a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1e      	subs	r3, #30
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	3b1e      	subs	r3, #30
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	e019      	b.n	800186e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6919      	ldr	r1, [r3, #16]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6898      	ldr	r0, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d003      	beq.n	800187e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800187a:	2b11      	cmp	r3, #17
 800187c:	d132      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d125      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d126      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d11a      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_ADC_ConfigChannel+0x1e8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <HAL_ADC_ConfigChannel+0x1ec>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	0c9a      	lsrs	r2, r3, #18
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c4:	e002      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f9      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x1b2>
 80018d2:	e007      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40012400 	.word	0x40012400
 80018fc:	20000004 	.word	0x20000004
 8001900:	431bde83 	.word	0x431bde83

08001904 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d040      	beq.n	80019a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <ADC_Enable+0xac>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <ADC_Enable+0xb0>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	0c9b      	lsrs	r3, r3, #18
 800193e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001940:	e002      	b.n	8001948 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3b01      	subs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800194e:	f7ff fbef 	bl	8001130 <HAL_GetTick>
 8001952:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001954:	e01f      	b.n	8001996 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001956:	f7ff fbeb 	bl	8001130 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d918      	bls.n	8001996 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b01      	cmp	r3, #1
 8001970:	d011      	beq.n	8001996 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f043 0210 	orr.w	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e007      	b.n	80019a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d1d8      	bne.n	8001956 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000004 	.word	0x20000004
 80019b4:	431bde83 	.word	0x431bde83

080019b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d12e      	bne.n	8001a30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019e2:	f7ff fba5 	bl	8001130 <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019e8:	e01b      	b.n	8001a22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019ea:	f7ff fba1 	bl	8001130 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d914      	bls.n	8001a22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10d      	bne.n	8001a22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	f043 0210 	orr.w	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e007      	b.n	8001a32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d0dc      	beq.n	80019ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADCEx_Calibration_Start+0x1e>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e097      	b.n	8001b8a <HAL_ADCEx_Calibration_Start+0x14e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa8 	bl	80019b8 <ADC_ConversionStop_Disable>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff49 	bl	8001904 <ADC_Enable>
 8001a72:	4603      	mov	r3, r0
 8001a74:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 8081 	bne.w	8001b80 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a86:	f023 0302 	bic.w	r3, r3, #2
 8001a8a:	f043 0202 	orr.w	r2, r3, #2
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a92:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <HAL_ADCEx_Calibration_Start+0x158>)
 8001a94:	681c      	ldr	r4, [r3, #0]
 8001a96:	2002      	movs	r0, #2
 8001a98:	f000 ffde 	bl	8002a58 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001aa2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001aa4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001aa6:	e002      	b.n	8001aae <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0208 	orr.w	r2, r2, #8
 8001ac2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ac4:	f7ff fb34 	bl	8001130 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001aca:	e01b      	b.n	8001b04 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001acc:	f7ff fb30 	bl	8001130 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b0a      	cmp	r3, #10
 8001ad8:	d914      	bls.n	8001b04 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f023 0312 	bic.w	r3, r3, #18
 8001af0:	f043 0210 	orr.w	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e042      	b.n	8001b8a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1dc      	bne.n	8001acc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b22:	f7ff fb05 	bl	8001130 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b28:	e01b      	b.n	8001b62 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b2a:	f7ff fb01 	bl	8001130 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b0a      	cmp	r3, #10
 8001b36:	d914      	bls.n	8001b62 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00d      	beq.n	8001b62 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f023 0312 	bic.w	r3, r3, #18
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e013      	b.n	8001b8a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1dc      	bne.n	8001b2a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	f023 0303 	bic.w	r3, r3, #3
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000004 	.word	0x20000004

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	; (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff90 	bl	8001bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff49 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff5e 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff90 	bl	8001c50 <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5f 	bl	8001bfc <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffb0 	bl	8001cb4 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	e169      	b.n	8002048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d74:	2201      	movs	r2, #1
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 8158 	bne.w	8002042 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a9a      	ldr	r2, [pc, #616]	; (8002000 <HAL_GPIO_Init+0x2a0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d05e      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001d9c:	4a98      	ldr	r2, [pc, #608]	; (8002000 <HAL_GPIO_Init+0x2a0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d875      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001da2:	4a98      	ldr	r2, [pc, #608]	; (8002004 <HAL_GPIO_Init+0x2a4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d058      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001da8:	4a96      	ldr	r2, [pc, #600]	; (8002004 <HAL_GPIO_Init+0x2a4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d86f      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dae:	4a96      	ldr	r2, [pc, #600]	; (8002008 <HAL_GPIO_Init+0x2a8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d052      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001db4:	4a94      	ldr	r2, [pc, #592]	; (8002008 <HAL_GPIO_Init+0x2a8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d869      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dba:	4a94      	ldr	r2, [pc, #592]	; (800200c <HAL_GPIO_Init+0x2ac>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d04c      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001dc0:	4a92      	ldr	r2, [pc, #584]	; (800200c <HAL_GPIO_Init+0x2ac>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d863      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dc6:	4a92      	ldr	r2, [pc, #584]	; (8002010 <HAL_GPIO_Init+0x2b0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d046      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001dcc:	4a90      	ldr	r2, [pc, #576]	; (8002010 <HAL_GPIO_Init+0x2b0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d85d      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d82a      	bhi.n	8001e2c <HAL_GPIO_Init+0xcc>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d859      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_GPIO_Init+0x80>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e5b 	.word	0x08001e5b
 8001de4:	08001e35 	.word	0x08001e35
 8001de8:	08001e47 	.word	0x08001e47
 8001dec:	08001e89 	.word	0x08001e89
 8001df0:	08001e8f 	.word	0x08001e8f
 8001df4:	08001e8f 	.word	0x08001e8f
 8001df8:	08001e8f 	.word	0x08001e8f
 8001dfc:	08001e8f 	.word	0x08001e8f
 8001e00:	08001e8f 	.word	0x08001e8f
 8001e04:	08001e8f 	.word	0x08001e8f
 8001e08:	08001e8f 	.word	0x08001e8f
 8001e0c:	08001e8f 	.word	0x08001e8f
 8001e10:	08001e8f 	.word	0x08001e8f
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e8f 	.word	0x08001e8f
 8001e1c:	08001e8f 	.word	0x08001e8f
 8001e20:	08001e8f 	.word	0x08001e8f
 8001e24:	08001e3d 	.word	0x08001e3d
 8001e28:	08001e51 	.word	0x08001e51
 8001e2c:	4a79      	ldr	r2, [pc, #484]	; (8002014 <HAL_GPIO_Init+0x2b4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e32:	e02c      	b.n	8001e8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e029      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	3304      	adds	r3, #4
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e024      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e01f      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	330c      	adds	r3, #12
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e01a      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e62:	2304      	movs	r3, #4
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e013      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e70:	2308      	movs	r3, #8
 8001e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	611a      	str	r2, [r3, #16]
          break;
 8001e7a:	e009      	b.n	8001e90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	615a      	str	r2, [r3, #20]
          break;
 8001e86:	e003      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          break;
 8001e8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2bff      	cmp	r3, #255	; 0xff
 8001e94:	d801      	bhi.n	8001e9a <HAL_GPIO_Init+0x13a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_Init+0x13e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2bff      	cmp	r3, #255	; 0xff
 8001ea4:	d802      	bhi.n	8001eac <HAL_GPIO_Init+0x14c>
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x152>
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3b08      	subs	r3, #8
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	210f      	movs	r1, #15
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	6a39      	ldr	r1, [r7, #32]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80b1 	beq.w	8002042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	; (8002018 <HAL_GPIO_Init+0x2b8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <HAL_GPIO_Init+0x2b8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_GPIO_Init+0x2b8>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ef8:	4a48      	ldr	r2, [pc, #288]	; (800201c <HAL_GPIO_Init+0x2bc>)
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a40      	ldr	r2, [pc, #256]	; (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <HAL_GPIO_Init+0x1ec>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3f      	ldr	r2, [pc, #252]	; (8002024 <HAL_GPIO_Init+0x2c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00d      	beq.n	8001f48 <HAL_GPIO_Init+0x1e8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3e      	ldr	r2, [pc, #248]	; (8002028 <HAL_GPIO_Init+0x2c8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <HAL_GPIO_Init+0x1e4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	; (800202c <HAL_GPIO_Init+0x2cc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_GPIO_Init+0x1e0>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e006      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e004      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e002      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	f002 0203 	and.w	r2, r2, #3
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	4093      	lsls	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f5e:	492f      	ldr	r1, [pc, #188]	; (800201c <HAL_GPIO_Init+0x2bc>)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	492c      	ldr	r1, [pc, #176]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4928      	ldr	r1, [pc, #160]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4922      	ldr	r1, [pc, #136]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	491e      	ldr	r1, [pc, #120]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4918      	ldr	r1, [pc, #96]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4914      	ldr	r1, [pc, #80]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d021      	beq.n	8002034 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	490e      	ldr	r1, [pc, #56]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e021      	b.n	8002042 <HAL_GPIO_Init+0x2e2>
 8001ffe:	bf00      	nop
 8002000:	10320000 	.word	0x10320000
 8002004:	10310000 	.word	0x10310000
 8002008:	10220000 	.word	0x10220000
 800200c:	10210000 	.word	0x10210000
 8002010:	10120000 	.word	0x10120000
 8002014:	10110000 	.word	0x10110000
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000
 8002020:	40010800 	.word	0x40010800
 8002024:	40010c00 	.word	0x40010c00
 8002028:	40011000 	.word	0x40011000
 800202c:	40011400 	.word	0x40011400
 8002030:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_GPIO_Init+0x304>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	43db      	mvns	r3, r3
 800203c:	4909      	ldr	r1, [pc, #36]	; (8002064 <HAL_GPIO_Init+0x304>)
 800203e:	4013      	ands	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	f47f ae8e 	bne.w	8001d74 <HAL_GPIO_Init+0x14>
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	372c      	adds	r7, #44	; 0x2c
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
 8002074:	4613      	mov	r3, r2
 8002076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002084:	e003      	b.n	800208e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43d9      	mvns	r1, r3
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	400b      	ands	r3, r1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e272      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8087 	beq.w	80021fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4b92      	ldr	r3, [pc, #584]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d00c      	beq.n	8002112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f8:	4b8f      	ldr	r3, [pc, #572]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d112      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
 8002104:	4b8c      	ldr	r3, [pc, #560]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d10b      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002112:	4b89      	ldr	r3, [pc, #548]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d06c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x12c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d168      	bne.n	80021f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e24c      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x76>
 8002134:	4b80      	ldr	r3, [pc, #512]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7f      	ldr	r2, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e02e      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x98>
 800214a:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7a      	ldr	r2, [pc, #488]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b78      	ldr	r3, [pc, #480]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a77      	ldr	r2, [pc, #476]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e01d      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0xbc>
 800216e:	4b72      	ldr	r3, [pc, #456]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a71      	ldr	r2, [pc, #452]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6e      	ldr	r2, [pc, #440]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002188:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6a      	ldr	r2, [pc, #424]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b68      	ldr	r3, [pc, #416]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a67      	ldr	r2, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe ffc2 	bl	8001130 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe ffbe 	bl	8001130 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e200      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xe4>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe ffae 	bl	8001130 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe ffaa 	bl	8001130 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1ec      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x10c>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d063      	beq.n	80022ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002212:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b43      	ldr	r3, [pc, #268]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1c0      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4939      	ldr	r1, [pc, #228]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe ff63 	bl	8001130 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7fe ff5f 	bl	8001130 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e1a1      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4927      	ldr	r1, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe ff42 	bl	8001130 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7fe ff3e 	bl	8001130 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e180      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d03a      	beq.n	8002350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d019      	beq.n	8002316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7fe ff22 	bl	8001130 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7fe ff1e 	bl	8001130 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e160      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800230e:	2001      	movs	r0, #1
 8002310:	f000 face 	bl	80028b0 <RCC_Delay>
 8002314:	e01c      	b.n	8002350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7fe ff08 	bl	8001130 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002322:	e00f      	b.n	8002344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7fe ff04 	bl	8001130 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d908      	bls.n	8002344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e146      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	42420000 	.word	0x42420000
 8002340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b92      	ldr	r3, [pc, #584]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e9      	bne.n	8002324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a6 	beq.w	80024aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a87      	ldr	r2, [pc, #540]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b85      	ldr	r3, [pc, #532]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b82      	ldr	r3, [pc, #520]	; (8002594 <HAL_RCC_OscConfig+0x4c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <HAL_RCC_OscConfig+0x4c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7e      	ldr	r2, [pc, #504]	; (8002594 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fec5 	bl	8001130 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7fe fec1 	bl	8001130 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	; 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e103      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b75      	ldr	r3, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x4c8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x312>
 80023d0:	4b6f      	ldr	r3, [pc, #444]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a6e      	ldr	r2, [pc, #440]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e02d      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x334>
 80023e6:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a69      	ldr	r2, [pc, #420]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a66      	ldr	r2, [pc, #408]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	e01c      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x356>
 8002408:	4b61      	ldr	r3, [pc, #388]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a60      	ldr	r2, [pc, #384]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	4b5e      	ldr	r3, [pc, #376]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a5d      	ldr	r2, [pc, #372]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6213      	str	r3, [r2, #32]
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002422:	4b5b      	ldr	r3, [pc, #364]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a5a      	ldr	r2, [pc, #360]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b58      	ldr	r3, [pc, #352]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d015      	beq.n	800246e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fe75 	bl	8001130 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fe71 	bl	8001130 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0b1      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ee      	beq.n	800244a <HAL_RCC_OscConfig+0x37e>
 800246c:	e014      	b.n	8002498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe fe5f 	bl	8001130 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe fe5b 	bl	8001130 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e09b      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	4b40      	ldr	r3, [pc, #256]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249e:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a3b      	ldr	r2, [pc, #236]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8087 	beq.w	80025c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d061      	beq.n	8002584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d146      	bne.n	8002556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b33      	ldr	r3, [pc, #204]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fe2f 	bl	8001130 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fe2b 	bl	8001130 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e06d      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	4b29      	ldr	r3, [pc, #164]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4921      	ldr	r1, [pc, #132]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002510:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a19      	ldr	r1, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	430b      	orrs	r3, r1
 8002522:	491b      	ldr	r1, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fdff 	bl	8001130 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fdfb 	bl	8001130 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e03d      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x46a>
 8002554:	e035      	b.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fde8 	bl	8001130 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fde4 	bl	8001130 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e026      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x498>
 8002582:	e01e      	b.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d107      	bne.n	800259c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e019      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
 8002598:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_OscConfig+0x500>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0d0      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4965      	ldr	r1, [pc, #404]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800264e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d040      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e073      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06b      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4936      	ldr	r1, [pc, #216]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fd36 	bl	8001130 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7fe fd32 	bl	8001130 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e053      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d210      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4922      	ldr	r1, [pc, #136]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1cc>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1d0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fca6 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
 8002798:	080044e4 	.word	0x080044e4
 800279c:	20000004 	.word	0x20000004
 80027a0:	20000008 	.word	0x20000008

080027a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <HAL_RCC_GetSysClockFreq+0x94>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x36>
 80027d2:	e027      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	e027      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	4a17      	ldr	r2, [pc, #92]	; (8002840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d010      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0c5b      	lsrs	r3, r3, #17
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	fb03 f202 	mul.w	r2, r3, r2
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e004      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	613b      	str	r3, [r7, #16]
      break;
 8002822:	e002      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 8002826:	613b      	str	r3, [r7, #16]
      break;
 8002828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282a:	693b      	ldr	r3, [r7, #16]
}
 800282c:	4618      	mov	r0, r3
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	007a1200 	.word	0x007a1200
 8002840:	080044fc 	.word	0x080044fc
 8002844:	0800450c 	.word	0x0800450c
 8002848:	003d0900 	.word	0x003d0900

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_RCC_GetHCLKFreq+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000004 	.word	0x20000004

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff2 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	080044f4 	.word	0x080044f4

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffde 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	0adb      	lsrs	r3, r3, #11
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	080044f4 	.word	0x080044f4

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000004 	.word	0x20000004
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d07d      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4a4b      	ldr	r2, [pc, #300]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	61d3      	str	r3, [r2, #28]
 8002924:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d118      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002940:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a42      	ldr	r2, [pc, #264]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294c:	f7fe fbf0 	bl	8001130 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fbec 	bl	8001130 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e06d      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002972:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d027      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029a6:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe fbbb 	bl	8001130 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fbb7 	bl	8001130 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e036      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4917      	ldr	r1, [pc, #92]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	490b      	ldr	r1, [pc, #44]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42420440 	.word	0x42420440

08002a58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	f200 808a 	bhi.w	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d045      	beq.n	8002b14 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d075      	beq.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a8e:	e082      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002a90:	4b46      	ldr	r3, [pc, #280]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a96:	4b45      	ldr	r3, [pc, #276]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d07b      	beq.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	0c9b      	lsrs	r3, r3, #18
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	4a41      	ldr	r2, [pc, #260]	; (8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d015      	beq.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aba:	4b3c      	ldr	r3, [pc, #240]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0c5b      	lsrs	r3, r3, #17
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	4a3b      	ldr	r2, [pc, #236]	; (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ad4:	4a38      	ldr	r2, [pc, #224]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	e004      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afc:	d102      	bne.n	8002b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	61bb      	str	r3, [r7, #24]
      break;
 8002b02:	e04a      	b.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4a2d      	ldr	r2, [pc, #180]	; (8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]
      break;
 8002b12:	e042      	b.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b24:	d108      	bne.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e01f      	b.n	8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b42:	d109      	bne.n	8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002b50:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e00f      	b.n	8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b62:	d11c      	bne.n	8002b9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d016      	beq.n	8002b9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002b70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b74:	61bb      	str	r3, [r7, #24]
      break;
 8002b76:	e012      	b.n	8002b9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002b78:	e011      	b.n	8002b9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b7a:	f7ff fe85 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	0b9b      	lsrs	r3, r3, #14
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	61bb      	str	r3, [r7, #24]
      break;
 8002b94:	e004      	b.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b9e:	bf00      	nop
    }
  }
  return (frequency);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08004510 	.word	0x08004510
 8002bb4:	08004520 	.word	0x08004520
 8002bb8:	007a1200 	.word	0x007a1200
 8002bbc:	003d0900 	.word	0x003d0900
 8002bc0:	aaaaaaab 	.word	0xaaaaaaab

08002bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e041      	b.n	8002c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe f934 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 fab2 	bl	800316c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e041      	b.n	8002cf8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f839 	bl	8002d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f000 fa63 	bl	800316c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_TIM_PWM_Start+0x24>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e022      	b.n	8002d7e <HAL_TIM_PWM_Start+0x6a>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d109      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x3e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e015      	b.n	8002d7e <HAL_TIM_PWM_Start+0x6a>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d109      	bne.n	8002d6c <HAL_TIM_PWM_Start+0x58>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e008      	b.n	8002d7e <HAL_TIM_PWM_Start+0x6a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e05e      	b.n	8002e44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_PWM_Start+0x82>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d94:	e013      	b.n	8002dbe <HAL_TIM_PWM_Start+0xaa>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_PWM_Start+0x92>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da4:	e00b      	b.n	8002dbe <HAL_TIM_PWM_Start+0xaa>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_PWM_Start+0xa2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db4:	e003      	b.n	8002dbe <HAL_TIM_PWM_Start+0xaa>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fc50 	bl	800366c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <HAL_TIM_PWM_Start+0x138>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d107      	bne.n	8002de6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <HAL_TIM_PWM_Start+0x138>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_TIM_PWM_Start+0xfa>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d009      	beq.n	8002e0e <HAL_TIM_PWM_Start+0xfa>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <HAL_TIM_PWM_Start+0x13c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_TIM_PWM_Start+0xfa>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_TIM_PWM_Start+0x140>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d111      	bne.n	8002e32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d010      	beq.n	8002e42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e30:	e007      	b.n	8002e42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800

08002e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0ae      	b.n	8002fd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	f200 809f 	bhi.w	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e86:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002ec1 	.word	0x08002ec1
 8002e90:	08002fc5 	.word	0x08002fc5
 8002e94:	08002fc5 	.word	0x08002fc5
 8002e98:	08002fc5 	.word	0x08002fc5
 8002e9c:	08002f01 	.word	0x08002f01
 8002ea0:	08002fc5 	.word	0x08002fc5
 8002ea4:	08002fc5 	.word	0x08002fc5
 8002ea8:	08002fc5 	.word	0x08002fc5
 8002eac:	08002f43 	.word	0x08002f43
 8002eb0:	08002fc5 	.word	0x08002fc5
 8002eb4:	08002fc5 	.word	0x08002fc5
 8002eb8:	08002fc5 	.word	0x08002fc5
 8002ebc:	08002f83 	.word	0x08002f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f9b2 	bl	8003230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	619a      	str	r2, [r3, #24]
      break;
 8002efe:	e064      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f9f8 	bl	80032fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6999      	ldr	r1, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	021a      	lsls	r2, r3, #8
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
      break;
 8002f40:	e043      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fa41 	bl	80033d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0208 	orr.w	r2, r2, #8
 8002f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0204 	bic.w	r2, r2, #4
 8002f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	61da      	str	r2, [r3, #28]
      break;
 8002f80:	e023      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fa8b 	bl	80034a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69d9      	ldr	r1, [r3, #28]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	021a      	lsls	r2, r3, #8
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	61da      	str	r2, [r3, #28]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0b4      	b.n	8003162 <HAL_TIM_ConfigClockSource+0x186>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800301e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003030:	d03e      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	f200 8087 	bhi.w	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	f000 8086 	beq.w	800314e <HAL_TIM_ConfigClockSource+0x172>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003046:	d87f      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b70      	cmp	r3, #112	; 0x70
 800304a:	d01a      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0xa6>
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d87b      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b60      	cmp	r3, #96	; 0x60
 8003052:	d050      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d877      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b50      	cmp	r3, #80	; 0x50
 800305a:	d03c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0xfa>
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d873      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d058      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x13a>
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d86f      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b30      	cmp	r3, #48	; 0x30
 800306a:	d064      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 800306c:	2b30      	cmp	r3, #48	; 0x30
 800306e:	d86b      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d060      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d867      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d05c      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d05a      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	e062      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f000 facc 	bl	800362e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	609a      	str	r2, [r3, #8]
      break;
 80030ae:	e04f      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f000 fab5 	bl	800362e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d2:	609a      	str	r2, [r3, #8]
      break;
 80030d4:	e03c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fa2c 	bl	8003540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2150      	movs	r1, #80	; 0x50
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fa83 	bl	80035fa <TIM_ITRx_SetConfig>
      break;
 80030f4:	e02c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f000 fa4a 	bl	800359c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2160      	movs	r1, #96	; 0x60
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fa73 	bl	80035fa <TIM_ITRx_SetConfig>
      break;
 8003114:	e01c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	461a      	mov	r2, r3
 8003124:	f000 fa0c 	bl	8003540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2140      	movs	r1, #64	; 0x40
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa63 	bl	80035fa <TIM_ITRx_SetConfig>
      break;
 8003134:	e00c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f000 fa5a 	bl	80035fa <TIM_ITRx_SetConfig>
      break;
 8003146:	e003      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e000      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800314e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a29      	ldr	r2, [pc, #164]	; (8003224 <TIM_Base_SetConfig+0xb8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00b      	beq.n	800319c <TIM_Base_SetConfig+0x30>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d007      	beq.n	800319c <TIM_Base_SetConfig+0x30>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a26      	ldr	r2, [pc, #152]	; (8003228 <TIM_Base_SetConfig+0xbc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_Base_SetConfig+0x30>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a25      	ldr	r2, [pc, #148]	; (800322c <TIM_Base_SetConfig+0xc0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d108      	bne.n	80031ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <TIM_Base_SetConfig+0xb8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00b      	beq.n	80031ce <TIM_Base_SetConfig+0x62>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031bc:	d007      	beq.n	80031ce <TIM_Base_SetConfig+0x62>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <TIM_Base_SetConfig+0xbc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_Base_SetConfig+0x62>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <TIM_Base_SetConfig+0xc0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d108      	bne.n	80031e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a07      	ldr	r2, [pc, #28]	; (8003224 <TIM_Base_SetConfig+0xb8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d103      	bne.n	8003214 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	615a      	str	r2, [r3, #20]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800

08003230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f023 0201 	bic.w	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f023 0302 	bic.w	r3, r3, #2
 8003278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <TIM_OC1_SetConfig+0xc8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d10c      	bne.n	80032a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0308 	bic.w	r3, r3, #8
 8003292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <TIM_OC1_SetConfig+0xc8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d111      	bne.n	80032d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	621a      	str	r2, [r3, #32]
}
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00

080032fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f023 0210 	bic.w	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0320 	bic.w	r3, r3, #32
 8003346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <TIM_OC2_SetConfig+0xd0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d10d      	bne.n	8003378 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a14      	ldr	r2, [pc, #80]	; (80033cc <TIM_OC2_SetConfig+0xd0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d113      	bne.n	80033a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40012c00 	.word	0x40012c00

080033d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <TIM_OC3_SetConfig+0xd0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10d      	bne.n	800344a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <TIM_OC3_SetConfig+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d113      	bne.n	800347a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00

080034a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	031b      	lsls	r3, r3, #12
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0f      	ldr	r2, [pc, #60]	; (800353c <TIM_OC4_SetConfig+0x98>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d109      	bne.n	8003518 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	019b      	lsls	r3, r3, #6
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00

08003540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 030a 	bic.w	r3, r3, #10
 800357c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f023 0210 	bic.w	r2, r3, #16
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	031b      	lsls	r3, r3, #12
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	f043 0307 	orr.w	r3, r3, #7
 800361c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800362e:	b480      	push	{r7}
 8003630:	b087      	sub	sp, #28
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003648:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	021a      	lsls	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	431a      	orrs	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	609a      	str	r2, [r3, #8]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2201      	movs	r2, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a1a      	ldr	r2, [r3, #32]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	43db      	mvns	r3, r3
 800368e:	401a      	ands	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e046      	b.n	800375a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003718:	d009      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a12      	ldr	r2, [pc, #72]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a10      	ldr	r2, [pc, #64]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10c      	bne.n	8003748 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800

08003770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e042      	b.n	8003808 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fbae 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f91d 	bl	80039f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b20      	cmp	r3, #32
 800382e:	d16d      	bne.n	800390c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Transmit+0x2c>
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e066      	b.n	800390e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2221      	movs	r2, #33	; 0x21
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384e:	f7fd fc6f 	bl	8001130 <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003868:	d108      	bne.n	800387c <HAL_UART_Transmit+0x6c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e003      	b.n	8003884 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003884:	e02a      	b.n	80038dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f840 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e036      	b.n	800390e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	3302      	adds	r3, #2
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e007      	b.n	80038ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	3301      	adds	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1cf      	bne.n	8003886 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f810 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e006      	b.n	800390e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b090      	sub	sp, #64	; 0x40
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	e050      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d04c      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0x30>
 8003936:	f7fd fbfb 	bl	8001130 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003942:	429a      	cmp	r2, r3
 8003944:	d241      	bcs.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003966:	637a      	str	r2, [r7, #52]	; 0x34
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800396c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e5      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3314      	adds	r3, #20
 8003980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	613b      	str	r3, [r7, #16]
   return(result);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	63bb      	str	r3, [r7, #56]	; 0x38
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800399a:	623a      	str	r2, [r7, #32]
 800399c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	69f9      	ldr	r1, [r7, #28]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e00f      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d09f      	beq.n	8003928 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3740      	adds	r7, #64	; 0x40
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a2e:	f023 030c 	bic.w	r3, r3, #12
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2c      	ldr	r2, [pc, #176]	; (8003b08 <UART_SetConfig+0x114>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d103      	bne.n	8003a64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a5c:	f7fe ff14 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	e002      	b.n	8003a6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a64:	f7fe fefc 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8003a68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009a      	lsls	r2, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <UART_SetConfig+0x118>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	0119      	lsls	r1, r3, #4
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	009a      	lsls	r2, r3, #2
 8003a94:	441a      	add	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <UART_SetConfig+0x118>)
 8003aa2:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2064      	movs	r0, #100	; 0x64
 8003aaa:	fb00 f303 	mul.w	r3, r0, r3
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	3332      	adds	r3, #50	; 0x32
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <UART_SetConfig+0x118>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac0:	4419      	add	r1, r3
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009a      	lsls	r2, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <UART_SetConfig+0x118>)
 8003ada:	fba3 0302 	umull	r0, r3, r3, r2
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2064      	movs	r0, #100	; 0x64
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	3332      	adds	r3, #50	; 0x32
 8003aec:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <UART_SetConfig+0x118>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	f003 020f 	and.w	r2, r3, #15
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	440a      	add	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	51eb851f 	.word	0x51eb851f

08003b10 <__errno>:
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <__errno+0x8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000010 	.word	0x20000010

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	2600      	movs	r6, #0
 8003b20:	4d0c      	ldr	r5, [pc, #48]	; (8003b54 <__libc_init_array+0x38>)
 8003b22:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	f000 fc9c 	bl	8004468 <_init>
 8003b30:	2600      	movs	r6, #0
 8003b32:	4d0a      	ldr	r5, [pc, #40]	; (8003b5c <__libc_init_array+0x40>)
 8003b34:	4c0a      	ldr	r4, [pc, #40]	; (8003b60 <__libc_init_array+0x44>)
 8003b36:	1b64      	subs	r4, r4, r5
 8003b38:	10a4      	asrs	r4, r4, #2
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08004558 	.word	0x08004558
 8003b58:	08004558 	.word	0x08004558
 8003b5c:	08004558 	.word	0x08004558
 8003b60:	0800455c 	.word	0x0800455c

08003b64 <memset>:
 8003b64:	4603      	mov	r3, r0
 8003b66:	4402      	add	r2, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d100      	bne.n	8003b6e <memset+0xa>
 8003b6c:	4770      	bx	lr
 8003b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b72:	e7f9      	b.n	8003b68 <memset+0x4>

08003b74 <siprintf>:
 8003b74:	b40e      	push	{r1, r2, r3}
 8003b76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b7a:	b500      	push	{lr}
 8003b7c:	b09c      	sub	sp, #112	; 0x70
 8003b7e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b80:	9002      	str	r0, [sp, #8]
 8003b82:	9006      	str	r0, [sp, #24]
 8003b84:	9107      	str	r1, [sp, #28]
 8003b86:	9104      	str	r1, [sp, #16]
 8003b88:	4808      	ldr	r0, [pc, #32]	; (8003bac <siprintf+0x38>)
 8003b8a:	4909      	ldr	r1, [pc, #36]	; (8003bb0 <siprintf+0x3c>)
 8003b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b90:	9105      	str	r1, [sp, #20]
 8003b92:	6800      	ldr	r0, [r0, #0]
 8003b94:	a902      	add	r1, sp, #8
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	f000 f868 	bl	8003c6c <_svfiprintf_r>
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	9b02      	ldr	r3, [sp, #8]
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	b01c      	add	sp, #112	; 0x70
 8003ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ba8:	b003      	add	sp, #12
 8003baa:	4770      	bx	lr
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	ffff0208 	.word	0xffff0208

08003bb4 <__ssputs_r>:
 8003bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb8:	688e      	ldr	r6, [r1, #8]
 8003bba:	4682      	mov	sl, r0
 8003bbc:	429e      	cmp	r6, r3
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	4690      	mov	r8, r2
 8003bc2:	461f      	mov	r7, r3
 8003bc4:	d838      	bhi.n	8003c38 <__ssputs_r+0x84>
 8003bc6:	898a      	ldrh	r2, [r1, #12]
 8003bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bcc:	d032      	beq.n	8003c34 <__ssputs_r+0x80>
 8003bce:	6825      	ldr	r5, [r4, #0]
 8003bd0:	6909      	ldr	r1, [r1, #16]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	eba5 0901 	sub.w	r9, r5, r1
 8003bd8:	6965      	ldr	r5, [r4, #20]
 8003bda:	444b      	add	r3, r9
 8003bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003be0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003be4:	106d      	asrs	r5, r5, #1
 8003be6:	429d      	cmp	r5, r3
 8003be8:	bf38      	it	cc
 8003bea:	461d      	movcc	r5, r3
 8003bec:	0553      	lsls	r3, r2, #21
 8003bee:	d531      	bpl.n	8003c54 <__ssputs_r+0xa0>
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f000 fb6f 	bl	80042d4 <_malloc_r>
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	b950      	cbnz	r0, 8003c10 <__ssputs_r+0x5c>
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	f8ca 3000 	str.w	r3, [sl]
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0a:	81a3      	strh	r3, [r4, #12]
 8003c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c10:	464a      	mov	r2, r9
 8003c12:	6921      	ldr	r1, [r4, #16]
 8003c14:	f000 face 	bl	80041b4 <memcpy>
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	6126      	str	r6, [r4, #16]
 8003c26:	444e      	add	r6, r9
 8003c28:	6026      	str	r6, [r4, #0]
 8003c2a:	463e      	mov	r6, r7
 8003c2c:	6165      	str	r5, [r4, #20]
 8003c2e:	eba5 0509 	sub.w	r5, r5, r9
 8003c32:	60a5      	str	r5, [r4, #8]
 8003c34:	42be      	cmp	r6, r7
 8003c36:	d900      	bls.n	8003c3a <__ssputs_r+0x86>
 8003c38:	463e      	mov	r6, r7
 8003c3a:	4632      	mov	r2, r6
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	f000 fac6 	bl	80041d0 <memmove>
 8003c44:	68a3      	ldr	r3, [r4, #8]
 8003c46:	2000      	movs	r0, #0
 8003c48:	1b9b      	subs	r3, r3, r6
 8003c4a:	60a3      	str	r3, [r4, #8]
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	4433      	add	r3, r6
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	e7db      	b.n	8003c0c <__ssputs_r+0x58>
 8003c54:	462a      	mov	r2, r5
 8003c56:	f000 fbb1 	bl	80043bc <_realloc_r>
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d1e1      	bne.n	8003c24 <__ssputs_r+0x70>
 8003c60:	4650      	mov	r0, sl
 8003c62:	6921      	ldr	r1, [r4, #16]
 8003c64:	f000 face 	bl	8004204 <_free_r>
 8003c68:	e7c7      	b.n	8003bfa <__ssputs_r+0x46>
	...

08003c6c <_svfiprintf_r>:
 8003c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c70:	4698      	mov	r8, r3
 8003c72:	898b      	ldrh	r3, [r1, #12]
 8003c74:	4607      	mov	r7, r0
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	460d      	mov	r5, r1
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	b09d      	sub	sp, #116	; 0x74
 8003c7e:	d50e      	bpl.n	8003c9e <_svfiprintf_r+0x32>
 8003c80:	690b      	ldr	r3, [r1, #16]
 8003c82:	b963      	cbnz	r3, 8003c9e <_svfiprintf_r+0x32>
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	f000 fb25 	bl	80042d4 <_malloc_r>
 8003c8a:	6028      	str	r0, [r5, #0]
 8003c8c:	6128      	str	r0, [r5, #16]
 8003c8e:	b920      	cbnz	r0, 8003c9a <_svfiprintf_r+0x2e>
 8003c90:	230c      	movs	r3, #12
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	e0d1      	b.n	8003e3e <_svfiprintf_r+0x1d2>
 8003c9a:	2340      	movs	r3, #64	; 0x40
 8003c9c:	616b      	str	r3, [r5, #20]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ca8:	2330      	movs	r3, #48	; 0x30
 8003caa:	f04f 0901 	mov.w	r9, #1
 8003cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e58 <_svfiprintf_r+0x1ec>
 8003cb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cba:	4623      	mov	r3, r4
 8003cbc:	469a      	mov	sl, r3
 8003cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cc2:	b10a      	cbz	r2, 8003cc8 <_svfiprintf_r+0x5c>
 8003cc4:	2a25      	cmp	r2, #37	; 0x25
 8003cc6:	d1f9      	bne.n	8003cbc <_svfiprintf_r+0x50>
 8003cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8003ccc:	d00b      	beq.n	8003ce6 <_svfiprintf_r+0x7a>
 8003cce:	465b      	mov	r3, fp
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	f7ff ff6d 	bl	8003bb4 <__ssputs_r>
 8003cda:	3001      	adds	r0, #1
 8003cdc:	f000 80aa 	beq.w	8003e34 <_svfiprintf_r+0x1c8>
 8003ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ce2:	445a      	add	r2, fp
 8003ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80a2 	beq.w	8003e34 <_svfiprintf_r+0x1c8>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cfa:	f10a 0a01 	add.w	sl, sl, #1
 8003cfe:	9304      	str	r3, [sp, #16]
 8003d00:	9307      	str	r3, [sp, #28]
 8003d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d06:	931a      	str	r3, [sp, #104]	; 0x68
 8003d08:	4654      	mov	r4, sl
 8003d0a:	2205      	movs	r2, #5
 8003d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d10:	4851      	ldr	r0, [pc, #324]	; (8003e58 <_svfiprintf_r+0x1ec>)
 8003d12:	f000 fa41 	bl	8004198 <memchr>
 8003d16:	9a04      	ldr	r2, [sp, #16]
 8003d18:	b9d8      	cbnz	r0, 8003d52 <_svfiprintf_r+0xe6>
 8003d1a:	06d0      	lsls	r0, r2, #27
 8003d1c:	bf44      	itt	mi
 8003d1e:	2320      	movmi	r3, #32
 8003d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d24:	0711      	lsls	r1, r2, #28
 8003d26:	bf44      	itt	mi
 8003d28:	232b      	movmi	r3, #43	; 0x2b
 8003d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d32:	2b2a      	cmp	r3, #42	; 0x2a
 8003d34:	d015      	beq.n	8003d62 <_svfiprintf_r+0xf6>
 8003d36:	4654      	mov	r4, sl
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f04f 0c0a 	mov.w	ip, #10
 8003d3e:	9a07      	ldr	r2, [sp, #28]
 8003d40:	4621      	mov	r1, r4
 8003d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d46:	3b30      	subs	r3, #48	; 0x30
 8003d48:	2b09      	cmp	r3, #9
 8003d4a:	d94e      	bls.n	8003dea <_svfiprintf_r+0x17e>
 8003d4c:	b1b0      	cbz	r0, 8003d7c <_svfiprintf_r+0x110>
 8003d4e:	9207      	str	r2, [sp, #28]
 8003d50:	e014      	b.n	8003d7c <_svfiprintf_r+0x110>
 8003d52:	eba0 0308 	sub.w	r3, r0, r8
 8003d56:	fa09 f303 	lsl.w	r3, r9, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	46a2      	mov	sl, r4
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	e7d2      	b.n	8003d08 <_svfiprintf_r+0x9c>
 8003d62:	9b03      	ldr	r3, [sp, #12]
 8003d64:	1d19      	adds	r1, r3, #4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	9103      	str	r1, [sp, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfbb      	ittet	lt
 8003d6e:	425b      	neglt	r3, r3
 8003d70:	f042 0202 	orrlt.w	r2, r2, #2
 8003d74:	9307      	strge	r3, [sp, #28]
 8003d76:	9307      	strlt	r3, [sp, #28]
 8003d78:	bfb8      	it	lt
 8003d7a:	9204      	strlt	r2, [sp, #16]
 8003d7c:	7823      	ldrb	r3, [r4, #0]
 8003d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d80:	d10c      	bne.n	8003d9c <_svfiprintf_r+0x130>
 8003d82:	7863      	ldrb	r3, [r4, #1]
 8003d84:	2b2a      	cmp	r3, #42	; 0x2a
 8003d86:	d135      	bne.n	8003df4 <_svfiprintf_r+0x188>
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	3402      	adds	r4, #2
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	9203      	str	r2, [sp, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bfb8      	it	lt
 8003d96:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d9a:	9305      	str	r3, [sp, #20]
 8003d9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003e5c <_svfiprintf_r+0x1f0>
 8003da0:	2203      	movs	r2, #3
 8003da2:	4650      	mov	r0, sl
 8003da4:	7821      	ldrb	r1, [r4, #0]
 8003da6:	f000 f9f7 	bl	8004198 <memchr>
 8003daa:	b140      	cbz	r0, 8003dbe <_svfiprintf_r+0x152>
 8003dac:	2340      	movs	r3, #64	; 0x40
 8003dae:	eba0 000a 	sub.w	r0, r0, sl
 8003db2:	fa03 f000 	lsl.w	r0, r3, r0
 8003db6:	9b04      	ldr	r3, [sp, #16]
 8003db8:	3401      	adds	r4, #1
 8003dba:	4303      	orrs	r3, r0
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc2:	2206      	movs	r2, #6
 8003dc4:	4826      	ldr	r0, [pc, #152]	; (8003e60 <_svfiprintf_r+0x1f4>)
 8003dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dca:	f000 f9e5 	bl	8004198 <memchr>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d038      	beq.n	8003e44 <_svfiprintf_r+0x1d8>
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <_svfiprintf_r+0x1f8>)
 8003dd4:	bb1b      	cbnz	r3, 8003e1e <_svfiprintf_r+0x1b2>
 8003dd6:	9b03      	ldr	r3, [sp, #12]
 8003dd8:	3307      	adds	r3, #7
 8003dda:	f023 0307 	bic.w	r3, r3, #7
 8003dde:	3308      	adds	r3, #8
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de4:	4433      	add	r3, r6
 8003de6:	9309      	str	r3, [sp, #36]	; 0x24
 8003de8:	e767      	b.n	8003cba <_svfiprintf_r+0x4e>
 8003dea:	460c      	mov	r4, r1
 8003dec:	2001      	movs	r0, #1
 8003dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df2:	e7a5      	b.n	8003d40 <_svfiprintf_r+0xd4>
 8003df4:	2300      	movs	r3, #0
 8003df6:	f04f 0c0a 	mov.w	ip, #10
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	3401      	adds	r4, #1
 8003dfe:	9305      	str	r3, [sp, #20]
 8003e00:	4620      	mov	r0, r4
 8003e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e06:	3a30      	subs	r2, #48	; 0x30
 8003e08:	2a09      	cmp	r2, #9
 8003e0a:	d903      	bls.n	8003e14 <_svfiprintf_r+0x1a8>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0c5      	beq.n	8003d9c <_svfiprintf_r+0x130>
 8003e10:	9105      	str	r1, [sp, #20]
 8003e12:	e7c3      	b.n	8003d9c <_svfiprintf_r+0x130>
 8003e14:	4604      	mov	r4, r0
 8003e16:	2301      	movs	r3, #1
 8003e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e1c:	e7f0      	b.n	8003e00 <_svfiprintf_r+0x194>
 8003e1e:	ab03      	add	r3, sp, #12
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	462a      	mov	r2, r5
 8003e24:	4638      	mov	r0, r7
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <_svfiprintf_r+0x1fc>)
 8003e28:	a904      	add	r1, sp, #16
 8003e2a:	f3af 8000 	nop.w
 8003e2e:	1c42      	adds	r2, r0, #1
 8003e30:	4606      	mov	r6, r0
 8003e32:	d1d6      	bne.n	8003de2 <_svfiprintf_r+0x176>
 8003e34:	89ab      	ldrh	r3, [r5, #12]
 8003e36:	065b      	lsls	r3, r3, #25
 8003e38:	f53f af2c 	bmi.w	8003c94 <_svfiprintf_r+0x28>
 8003e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e3e:	b01d      	add	sp, #116	; 0x74
 8003e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e44:	ab03      	add	r3, sp, #12
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	462a      	mov	r2, r5
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <_svfiprintf_r+0x1fc>)
 8003e4e:	a904      	add	r1, sp, #16
 8003e50:	f000 f87c 	bl	8003f4c <_printf_i>
 8003e54:	e7eb      	b.n	8003e2e <_svfiprintf_r+0x1c2>
 8003e56:	bf00      	nop
 8003e58:	08004522 	.word	0x08004522
 8003e5c:	08004528 	.word	0x08004528
 8003e60:	0800452c 	.word	0x0800452c
 8003e64:	00000000 	.word	0x00000000
 8003e68:	08003bb5 	.word	0x08003bb5

08003e6c <_printf_common>:
 8003e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e70:	4616      	mov	r6, r2
 8003e72:	4699      	mov	r9, r3
 8003e74:	688a      	ldr	r2, [r1, #8]
 8003e76:	690b      	ldr	r3, [r1, #16]
 8003e78:	4607      	mov	r7, r0
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	bfb8      	it	lt
 8003e7e:	4613      	movlt	r3, r2
 8003e80:	6033      	str	r3, [r6, #0]
 8003e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e86:	460c      	mov	r4, r1
 8003e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e8c:	b10a      	cbz	r2, 8003e92 <_printf_common+0x26>
 8003e8e:	3301      	adds	r3, #1
 8003e90:	6033      	str	r3, [r6, #0]
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	0699      	lsls	r1, r3, #26
 8003e96:	bf42      	ittt	mi
 8003e98:	6833      	ldrmi	r3, [r6, #0]
 8003e9a:	3302      	addmi	r3, #2
 8003e9c:	6033      	strmi	r3, [r6, #0]
 8003e9e:	6825      	ldr	r5, [r4, #0]
 8003ea0:	f015 0506 	ands.w	r5, r5, #6
 8003ea4:	d106      	bne.n	8003eb4 <_printf_common+0x48>
 8003ea6:	f104 0a19 	add.w	sl, r4, #25
 8003eaa:	68e3      	ldr	r3, [r4, #12]
 8003eac:	6832      	ldr	r2, [r6, #0]
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	42ab      	cmp	r3, r5
 8003eb2:	dc28      	bgt.n	8003f06 <_printf_common+0x9a>
 8003eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003eb8:	1e13      	subs	r3, r2, #0
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	bf18      	it	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	0692      	lsls	r2, r2, #26
 8003ec2:	d42d      	bmi.n	8003f20 <_printf_common+0xb4>
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ecc:	47c0      	blx	r8
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d020      	beq.n	8003f14 <_printf_common+0xa8>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	68e5      	ldr	r5, [r4, #12]
 8003ed6:	f003 0306 	and.w	r3, r3, #6
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	bf18      	it	ne
 8003ede:	2500      	movne	r5, #0
 8003ee0:	6832      	ldr	r2, [r6, #0]
 8003ee2:	f04f 0600 	mov.w	r6, #0
 8003ee6:	68a3      	ldr	r3, [r4, #8]
 8003ee8:	bf08      	it	eq
 8003eea:	1aad      	subeq	r5, r5, r2
 8003eec:	6922      	ldr	r2, [r4, #16]
 8003eee:	bf08      	it	eq
 8003ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bfc4      	itt	gt
 8003ef8:	1a9b      	subgt	r3, r3, r2
 8003efa:	18ed      	addgt	r5, r5, r3
 8003efc:	341a      	adds	r4, #26
 8003efe:	42b5      	cmp	r5, r6
 8003f00:	d11a      	bne.n	8003f38 <_printf_common+0xcc>
 8003f02:	2000      	movs	r0, #0
 8003f04:	e008      	b.n	8003f18 <_printf_common+0xac>
 8003f06:	2301      	movs	r3, #1
 8003f08:	4652      	mov	r2, sl
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	47c0      	blx	r8
 8003f10:	3001      	adds	r0, #1
 8003f12:	d103      	bne.n	8003f1c <_printf_common+0xb0>
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1c:	3501      	adds	r5, #1
 8003f1e:	e7c4      	b.n	8003eaa <_printf_common+0x3e>
 8003f20:	2030      	movs	r0, #48	; 0x30
 8003f22:	18e1      	adds	r1, r4, r3
 8003f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f2e:	4422      	add	r2, r4
 8003f30:	3302      	adds	r3, #2
 8003f32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f36:	e7c5      	b.n	8003ec4 <_printf_common+0x58>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	4638      	mov	r0, r7
 8003f40:	47c0      	blx	r8
 8003f42:	3001      	adds	r0, #1
 8003f44:	d0e6      	beq.n	8003f14 <_printf_common+0xa8>
 8003f46:	3601      	adds	r6, #1
 8003f48:	e7d9      	b.n	8003efe <_printf_common+0x92>
	...

08003f4c <_printf_i>:
 8003f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	7e0f      	ldrb	r7, [r1, #24]
 8003f52:	4691      	mov	r9, r2
 8003f54:	2f78      	cmp	r7, #120	; 0x78
 8003f56:	4680      	mov	r8, r0
 8003f58:	460c      	mov	r4, r1
 8003f5a:	469a      	mov	sl, r3
 8003f5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f62:	d807      	bhi.n	8003f74 <_printf_i+0x28>
 8003f64:	2f62      	cmp	r7, #98	; 0x62
 8003f66:	d80a      	bhi.n	8003f7e <_printf_i+0x32>
 8003f68:	2f00      	cmp	r7, #0
 8003f6a:	f000 80d9 	beq.w	8004120 <_printf_i+0x1d4>
 8003f6e:	2f58      	cmp	r7, #88	; 0x58
 8003f70:	f000 80a4 	beq.w	80040bc <_printf_i+0x170>
 8003f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f7c:	e03a      	b.n	8003ff4 <_printf_i+0xa8>
 8003f7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f82:	2b15      	cmp	r3, #21
 8003f84:	d8f6      	bhi.n	8003f74 <_printf_i+0x28>
 8003f86:	a101      	add	r1, pc, #4	; (adr r1, 8003f8c <_printf_i+0x40>)
 8003f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	08003ff9 	.word	0x08003ff9
 8003f94:	08003f75 	.word	0x08003f75
 8003f98:	08003f75 	.word	0x08003f75
 8003f9c:	08003f75 	.word	0x08003f75
 8003fa0:	08003f75 	.word	0x08003f75
 8003fa4:	08003ff9 	.word	0x08003ff9
 8003fa8:	08003f75 	.word	0x08003f75
 8003fac:	08003f75 	.word	0x08003f75
 8003fb0:	08003f75 	.word	0x08003f75
 8003fb4:	08003f75 	.word	0x08003f75
 8003fb8:	08004107 	.word	0x08004107
 8003fbc:	08004029 	.word	0x08004029
 8003fc0:	080040e9 	.word	0x080040e9
 8003fc4:	08003f75 	.word	0x08003f75
 8003fc8:	08003f75 	.word	0x08003f75
 8003fcc:	08004129 	.word	0x08004129
 8003fd0:	08003f75 	.word	0x08003f75
 8003fd4:	08004029 	.word	0x08004029
 8003fd8:	08003f75 	.word	0x08003f75
 8003fdc:	08003f75 	.word	0x08003f75
 8003fe0:	080040f1 	.word	0x080040f1
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	602a      	str	r2, [r5, #0]
 8003fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0a4      	b.n	8004142 <_printf_i+0x1f6>
 8003ff8:	6820      	ldr	r0, [r4, #0]
 8003ffa:	6829      	ldr	r1, [r5, #0]
 8003ffc:	0606      	lsls	r6, r0, #24
 8003ffe:	f101 0304 	add.w	r3, r1, #4
 8004002:	d50a      	bpl.n	800401a <_printf_i+0xce>
 8004004:	680e      	ldr	r6, [r1, #0]
 8004006:	602b      	str	r3, [r5, #0]
 8004008:	2e00      	cmp	r6, #0
 800400a:	da03      	bge.n	8004014 <_printf_i+0xc8>
 800400c:	232d      	movs	r3, #45	; 0x2d
 800400e:	4276      	negs	r6, r6
 8004010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004014:	230a      	movs	r3, #10
 8004016:	485e      	ldr	r0, [pc, #376]	; (8004190 <_printf_i+0x244>)
 8004018:	e019      	b.n	800404e <_printf_i+0x102>
 800401a:	680e      	ldr	r6, [r1, #0]
 800401c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004020:	602b      	str	r3, [r5, #0]
 8004022:	bf18      	it	ne
 8004024:	b236      	sxthne	r6, r6
 8004026:	e7ef      	b.n	8004008 <_printf_i+0xbc>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	6820      	ldr	r0, [r4, #0]
 800402c:	1d19      	adds	r1, r3, #4
 800402e:	6029      	str	r1, [r5, #0]
 8004030:	0601      	lsls	r1, r0, #24
 8004032:	d501      	bpl.n	8004038 <_printf_i+0xec>
 8004034:	681e      	ldr	r6, [r3, #0]
 8004036:	e002      	b.n	800403e <_printf_i+0xf2>
 8004038:	0646      	lsls	r6, r0, #25
 800403a:	d5fb      	bpl.n	8004034 <_printf_i+0xe8>
 800403c:	881e      	ldrh	r6, [r3, #0]
 800403e:	2f6f      	cmp	r7, #111	; 0x6f
 8004040:	bf0c      	ite	eq
 8004042:	2308      	moveq	r3, #8
 8004044:	230a      	movne	r3, #10
 8004046:	4852      	ldr	r0, [pc, #328]	; (8004190 <_printf_i+0x244>)
 8004048:	2100      	movs	r1, #0
 800404a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800404e:	6865      	ldr	r5, [r4, #4]
 8004050:	2d00      	cmp	r5, #0
 8004052:	bfa8      	it	ge
 8004054:	6821      	ldrge	r1, [r4, #0]
 8004056:	60a5      	str	r5, [r4, #8]
 8004058:	bfa4      	itt	ge
 800405a:	f021 0104 	bicge.w	r1, r1, #4
 800405e:	6021      	strge	r1, [r4, #0]
 8004060:	b90e      	cbnz	r6, 8004066 <_printf_i+0x11a>
 8004062:	2d00      	cmp	r5, #0
 8004064:	d04d      	beq.n	8004102 <_printf_i+0x1b6>
 8004066:	4615      	mov	r5, r2
 8004068:	fbb6 f1f3 	udiv	r1, r6, r3
 800406c:	fb03 6711 	mls	r7, r3, r1, r6
 8004070:	5dc7      	ldrb	r7, [r0, r7]
 8004072:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004076:	4637      	mov	r7, r6
 8004078:	42bb      	cmp	r3, r7
 800407a:	460e      	mov	r6, r1
 800407c:	d9f4      	bls.n	8004068 <_printf_i+0x11c>
 800407e:	2b08      	cmp	r3, #8
 8004080:	d10b      	bne.n	800409a <_printf_i+0x14e>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	07de      	lsls	r6, r3, #31
 8004086:	d508      	bpl.n	800409a <_printf_i+0x14e>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	6861      	ldr	r1, [r4, #4]
 800408c:	4299      	cmp	r1, r3
 800408e:	bfde      	ittt	le
 8004090:	2330      	movle	r3, #48	; 0x30
 8004092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004096:	f105 35ff 	addle.w	r5, r5, #4294967295
 800409a:	1b52      	subs	r2, r2, r5
 800409c:	6122      	str	r2, [r4, #16]
 800409e:	464b      	mov	r3, r9
 80040a0:	4621      	mov	r1, r4
 80040a2:	4640      	mov	r0, r8
 80040a4:	f8cd a000 	str.w	sl, [sp]
 80040a8:	aa03      	add	r2, sp, #12
 80040aa:	f7ff fedf 	bl	8003e6c <_printf_common>
 80040ae:	3001      	adds	r0, #1
 80040b0:	d14c      	bne.n	800414c <_printf_i+0x200>
 80040b2:	f04f 30ff 	mov.w	r0, #4294967295
 80040b6:	b004      	add	sp, #16
 80040b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040bc:	4834      	ldr	r0, [pc, #208]	; (8004190 <_printf_i+0x244>)
 80040be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040c2:	6829      	ldr	r1, [r5, #0]
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80040ca:	6029      	str	r1, [r5, #0]
 80040cc:	061d      	lsls	r5, r3, #24
 80040ce:	d514      	bpl.n	80040fa <_printf_i+0x1ae>
 80040d0:	07df      	lsls	r7, r3, #31
 80040d2:	bf44      	itt	mi
 80040d4:	f043 0320 	orrmi.w	r3, r3, #32
 80040d8:	6023      	strmi	r3, [r4, #0]
 80040da:	b91e      	cbnz	r6, 80040e4 <_printf_i+0x198>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	f023 0320 	bic.w	r3, r3, #32
 80040e2:	6023      	str	r3, [r4, #0]
 80040e4:	2310      	movs	r3, #16
 80040e6:	e7af      	b.n	8004048 <_printf_i+0xfc>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	f043 0320 	orr.w	r3, r3, #32
 80040ee:	6023      	str	r3, [r4, #0]
 80040f0:	2378      	movs	r3, #120	; 0x78
 80040f2:	4828      	ldr	r0, [pc, #160]	; (8004194 <_printf_i+0x248>)
 80040f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040f8:	e7e3      	b.n	80040c2 <_printf_i+0x176>
 80040fa:	0659      	lsls	r1, r3, #25
 80040fc:	bf48      	it	mi
 80040fe:	b2b6      	uxthmi	r6, r6
 8004100:	e7e6      	b.n	80040d0 <_printf_i+0x184>
 8004102:	4615      	mov	r5, r2
 8004104:	e7bb      	b.n	800407e <_printf_i+0x132>
 8004106:	682b      	ldr	r3, [r5, #0]
 8004108:	6826      	ldr	r6, [r4, #0]
 800410a:	1d18      	adds	r0, r3, #4
 800410c:	6961      	ldr	r1, [r4, #20]
 800410e:	6028      	str	r0, [r5, #0]
 8004110:	0635      	lsls	r5, r6, #24
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	d501      	bpl.n	800411a <_printf_i+0x1ce>
 8004116:	6019      	str	r1, [r3, #0]
 8004118:	e002      	b.n	8004120 <_printf_i+0x1d4>
 800411a:	0670      	lsls	r0, r6, #25
 800411c:	d5fb      	bpl.n	8004116 <_printf_i+0x1ca>
 800411e:	8019      	strh	r1, [r3, #0]
 8004120:	2300      	movs	r3, #0
 8004122:	4615      	mov	r5, r2
 8004124:	6123      	str	r3, [r4, #16]
 8004126:	e7ba      	b.n	800409e <_printf_i+0x152>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	2100      	movs	r1, #0
 800412c:	1d1a      	adds	r2, r3, #4
 800412e:	602a      	str	r2, [r5, #0]
 8004130:	681d      	ldr	r5, [r3, #0]
 8004132:	6862      	ldr	r2, [r4, #4]
 8004134:	4628      	mov	r0, r5
 8004136:	f000 f82f 	bl	8004198 <memchr>
 800413a:	b108      	cbz	r0, 8004140 <_printf_i+0x1f4>
 800413c:	1b40      	subs	r0, r0, r5
 800413e:	6060      	str	r0, [r4, #4]
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	6123      	str	r3, [r4, #16]
 8004144:	2300      	movs	r3, #0
 8004146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800414a:	e7a8      	b.n	800409e <_printf_i+0x152>
 800414c:	462a      	mov	r2, r5
 800414e:	4649      	mov	r1, r9
 8004150:	4640      	mov	r0, r8
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	47d0      	blx	sl
 8004156:	3001      	adds	r0, #1
 8004158:	d0ab      	beq.n	80040b2 <_printf_i+0x166>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	079b      	lsls	r3, r3, #30
 800415e:	d413      	bmi.n	8004188 <_printf_i+0x23c>
 8004160:	68e0      	ldr	r0, [r4, #12]
 8004162:	9b03      	ldr	r3, [sp, #12]
 8004164:	4298      	cmp	r0, r3
 8004166:	bfb8      	it	lt
 8004168:	4618      	movlt	r0, r3
 800416a:	e7a4      	b.n	80040b6 <_printf_i+0x16a>
 800416c:	2301      	movs	r3, #1
 800416e:	4632      	mov	r2, r6
 8004170:	4649      	mov	r1, r9
 8004172:	4640      	mov	r0, r8
 8004174:	47d0      	blx	sl
 8004176:	3001      	adds	r0, #1
 8004178:	d09b      	beq.n	80040b2 <_printf_i+0x166>
 800417a:	3501      	adds	r5, #1
 800417c:	68e3      	ldr	r3, [r4, #12]
 800417e:	9903      	ldr	r1, [sp, #12]
 8004180:	1a5b      	subs	r3, r3, r1
 8004182:	42ab      	cmp	r3, r5
 8004184:	dcf2      	bgt.n	800416c <_printf_i+0x220>
 8004186:	e7eb      	b.n	8004160 <_printf_i+0x214>
 8004188:	2500      	movs	r5, #0
 800418a:	f104 0619 	add.w	r6, r4, #25
 800418e:	e7f5      	b.n	800417c <_printf_i+0x230>
 8004190:	08004533 	.word	0x08004533
 8004194:	08004544 	.word	0x08004544

08004198 <memchr>:
 8004198:	4603      	mov	r3, r0
 800419a:	b510      	push	{r4, lr}
 800419c:	b2c9      	uxtb	r1, r1
 800419e:	4402      	add	r2, r0
 80041a0:	4293      	cmp	r3, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	d101      	bne.n	80041aa <memchr+0x12>
 80041a6:	2000      	movs	r0, #0
 80041a8:	e003      	b.n	80041b2 <memchr+0x1a>
 80041aa:	7804      	ldrb	r4, [r0, #0]
 80041ac:	3301      	adds	r3, #1
 80041ae:	428c      	cmp	r4, r1
 80041b0:	d1f6      	bne.n	80041a0 <memchr+0x8>
 80041b2:	bd10      	pop	{r4, pc}

080041b4 <memcpy>:
 80041b4:	440a      	add	r2, r1
 80041b6:	4291      	cmp	r1, r2
 80041b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041bc:	d100      	bne.n	80041c0 <memcpy+0xc>
 80041be:	4770      	bx	lr
 80041c0:	b510      	push	{r4, lr}
 80041c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041cc:	d1f9      	bne.n	80041c2 <memcpy+0xe>
 80041ce:	bd10      	pop	{r4, pc}

080041d0 <memmove>:
 80041d0:	4288      	cmp	r0, r1
 80041d2:	b510      	push	{r4, lr}
 80041d4:	eb01 0402 	add.w	r4, r1, r2
 80041d8:	d902      	bls.n	80041e0 <memmove+0x10>
 80041da:	4284      	cmp	r4, r0
 80041dc:	4623      	mov	r3, r4
 80041de:	d807      	bhi.n	80041f0 <memmove+0x20>
 80041e0:	1e43      	subs	r3, r0, #1
 80041e2:	42a1      	cmp	r1, r4
 80041e4:	d008      	beq.n	80041f8 <memmove+0x28>
 80041e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ee:	e7f8      	b.n	80041e2 <memmove+0x12>
 80041f0:	4601      	mov	r1, r0
 80041f2:	4402      	add	r2, r0
 80041f4:	428a      	cmp	r2, r1
 80041f6:	d100      	bne.n	80041fa <memmove+0x2a>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004202:	e7f7      	b.n	80041f4 <memmove+0x24>

08004204 <_free_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4605      	mov	r5, r0
 8004208:	2900      	cmp	r1, #0
 800420a:	d040      	beq.n	800428e <_free_r+0x8a>
 800420c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004210:	1f0c      	subs	r4, r1, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	bfb8      	it	lt
 8004216:	18e4      	addlt	r4, r4, r3
 8004218:	f000 f910 	bl	800443c <__malloc_lock>
 800421c:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <_free_r+0x8c>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	b933      	cbnz	r3, 8004230 <_free_r+0x2c>
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	6014      	str	r4, [r2, #0]
 8004226:	4628      	mov	r0, r5
 8004228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800422c:	f000 b90c 	b.w	8004448 <__malloc_unlock>
 8004230:	42a3      	cmp	r3, r4
 8004232:	d908      	bls.n	8004246 <_free_r+0x42>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	1821      	adds	r1, r4, r0
 8004238:	428b      	cmp	r3, r1
 800423a:	bf01      	itttt	eq
 800423c:	6819      	ldreq	r1, [r3, #0]
 800423e:	685b      	ldreq	r3, [r3, #4]
 8004240:	1809      	addeq	r1, r1, r0
 8004242:	6021      	streq	r1, [r4, #0]
 8004244:	e7ed      	b.n	8004222 <_free_r+0x1e>
 8004246:	461a      	mov	r2, r3
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b10b      	cbz	r3, 8004250 <_free_r+0x4c>
 800424c:	42a3      	cmp	r3, r4
 800424e:	d9fa      	bls.n	8004246 <_free_r+0x42>
 8004250:	6811      	ldr	r1, [r2, #0]
 8004252:	1850      	adds	r0, r2, r1
 8004254:	42a0      	cmp	r0, r4
 8004256:	d10b      	bne.n	8004270 <_free_r+0x6c>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	4401      	add	r1, r0
 800425c:	1850      	adds	r0, r2, r1
 800425e:	4283      	cmp	r3, r0
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	d1e0      	bne.n	8004226 <_free_r+0x22>
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4401      	add	r1, r0
 800426a:	6011      	str	r1, [r2, #0]
 800426c:	6053      	str	r3, [r2, #4]
 800426e:	e7da      	b.n	8004226 <_free_r+0x22>
 8004270:	d902      	bls.n	8004278 <_free_r+0x74>
 8004272:	230c      	movs	r3, #12
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	e7d6      	b.n	8004226 <_free_r+0x22>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428b      	cmp	r3, r1
 800427e:	bf01      	itttt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	1809      	addeq	r1, r1, r0
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	6063      	str	r3, [r4, #4]
 800428a:	6054      	str	r4, [r2, #4]
 800428c:	e7cb      	b.n	8004226 <_free_r+0x22>
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	2000017c 	.word	0x2000017c

08004294 <sbrk_aligned>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4e0e      	ldr	r6, [pc, #56]	; (80042d0 <sbrk_aligned+0x3c>)
 8004298:	460c      	mov	r4, r1
 800429a:	6831      	ldr	r1, [r6, #0]
 800429c:	4605      	mov	r5, r0
 800429e:	b911      	cbnz	r1, 80042a6 <sbrk_aligned+0x12>
 80042a0:	f000 f8bc 	bl	800441c <_sbrk_r>
 80042a4:	6030      	str	r0, [r6, #0]
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 f8b7 	bl	800441c <_sbrk_r>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	d00a      	beq.n	80042c8 <sbrk_aligned+0x34>
 80042b2:	1cc4      	adds	r4, r0, #3
 80042b4:	f024 0403 	bic.w	r4, r4, #3
 80042b8:	42a0      	cmp	r0, r4
 80042ba:	d007      	beq.n	80042cc <sbrk_aligned+0x38>
 80042bc:	1a21      	subs	r1, r4, r0
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f8ac 	bl	800441c <_sbrk_r>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d101      	bne.n	80042cc <sbrk_aligned+0x38>
 80042c8:	f04f 34ff 	mov.w	r4, #4294967295
 80042cc:	4620      	mov	r0, r4
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	20000180 	.word	0x20000180

080042d4 <_malloc_r>:
 80042d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d8:	1ccd      	adds	r5, r1, #3
 80042da:	f025 0503 	bic.w	r5, r5, #3
 80042de:	3508      	adds	r5, #8
 80042e0:	2d0c      	cmp	r5, #12
 80042e2:	bf38      	it	cc
 80042e4:	250c      	movcc	r5, #12
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	4607      	mov	r7, r0
 80042ea:	db01      	blt.n	80042f0 <_malloc_r+0x1c>
 80042ec:	42a9      	cmp	r1, r5
 80042ee:	d905      	bls.n	80042fc <_malloc_r+0x28>
 80042f0:	230c      	movs	r3, #12
 80042f2:	2600      	movs	r6, #0
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4630      	mov	r0, r6
 80042f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042fc:	4e2e      	ldr	r6, [pc, #184]	; (80043b8 <_malloc_r+0xe4>)
 80042fe:	f000 f89d 	bl	800443c <__malloc_lock>
 8004302:	6833      	ldr	r3, [r6, #0]
 8004304:	461c      	mov	r4, r3
 8004306:	bb34      	cbnz	r4, 8004356 <_malloc_r+0x82>
 8004308:	4629      	mov	r1, r5
 800430a:	4638      	mov	r0, r7
 800430c:	f7ff ffc2 	bl	8004294 <sbrk_aligned>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	4604      	mov	r4, r0
 8004314:	d14d      	bne.n	80043b2 <_malloc_r+0xde>
 8004316:	6834      	ldr	r4, [r6, #0]
 8004318:	4626      	mov	r6, r4
 800431a:	2e00      	cmp	r6, #0
 800431c:	d140      	bne.n	80043a0 <_malloc_r+0xcc>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	4631      	mov	r1, r6
 8004322:	4638      	mov	r0, r7
 8004324:	eb04 0803 	add.w	r8, r4, r3
 8004328:	f000 f878 	bl	800441c <_sbrk_r>
 800432c:	4580      	cmp	r8, r0
 800432e:	d13a      	bne.n	80043a6 <_malloc_r+0xd2>
 8004330:	6821      	ldr	r1, [r4, #0]
 8004332:	3503      	adds	r5, #3
 8004334:	1a6d      	subs	r5, r5, r1
 8004336:	f025 0503 	bic.w	r5, r5, #3
 800433a:	3508      	adds	r5, #8
 800433c:	2d0c      	cmp	r5, #12
 800433e:	bf38      	it	cc
 8004340:	250c      	movcc	r5, #12
 8004342:	4638      	mov	r0, r7
 8004344:	4629      	mov	r1, r5
 8004346:	f7ff ffa5 	bl	8004294 <sbrk_aligned>
 800434a:	3001      	adds	r0, #1
 800434c:	d02b      	beq.n	80043a6 <_malloc_r+0xd2>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	442b      	add	r3, r5
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	e00e      	b.n	8004374 <_malloc_r+0xa0>
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	1b52      	subs	r2, r2, r5
 800435a:	d41e      	bmi.n	800439a <_malloc_r+0xc6>
 800435c:	2a0b      	cmp	r2, #11
 800435e:	d916      	bls.n	800438e <_malloc_r+0xba>
 8004360:	1961      	adds	r1, r4, r5
 8004362:	42a3      	cmp	r3, r4
 8004364:	6025      	str	r5, [r4, #0]
 8004366:	bf18      	it	ne
 8004368:	6059      	strne	r1, [r3, #4]
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	bf08      	it	eq
 800436e:	6031      	streq	r1, [r6, #0]
 8004370:	5162      	str	r2, [r4, r5]
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	4638      	mov	r0, r7
 8004376:	f104 060b 	add.w	r6, r4, #11
 800437a:	f000 f865 	bl	8004448 <__malloc_unlock>
 800437e:	f026 0607 	bic.w	r6, r6, #7
 8004382:	1d23      	adds	r3, r4, #4
 8004384:	1af2      	subs	r2, r6, r3
 8004386:	d0b6      	beq.n	80042f6 <_malloc_r+0x22>
 8004388:	1b9b      	subs	r3, r3, r6
 800438a:	50a3      	str	r3, [r4, r2]
 800438c:	e7b3      	b.n	80042f6 <_malloc_r+0x22>
 800438e:	6862      	ldr	r2, [r4, #4]
 8004390:	42a3      	cmp	r3, r4
 8004392:	bf0c      	ite	eq
 8004394:	6032      	streq	r2, [r6, #0]
 8004396:	605a      	strne	r2, [r3, #4]
 8004398:	e7ec      	b.n	8004374 <_malloc_r+0xa0>
 800439a:	4623      	mov	r3, r4
 800439c:	6864      	ldr	r4, [r4, #4]
 800439e:	e7b2      	b.n	8004306 <_malloc_r+0x32>
 80043a0:	4634      	mov	r4, r6
 80043a2:	6876      	ldr	r6, [r6, #4]
 80043a4:	e7b9      	b.n	800431a <_malloc_r+0x46>
 80043a6:	230c      	movs	r3, #12
 80043a8:	4638      	mov	r0, r7
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	f000 f84c 	bl	8004448 <__malloc_unlock>
 80043b0:	e7a1      	b.n	80042f6 <_malloc_r+0x22>
 80043b2:	6025      	str	r5, [r4, #0]
 80043b4:	e7de      	b.n	8004374 <_malloc_r+0xa0>
 80043b6:	bf00      	nop
 80043b8:	2000017c 	.word	0x2000017c

080043bc <_realloc_r>:
 80043bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	4680      	mov	r8, r0
 80043c2:	4614      	mov	r4, r2
 80043c4:	460e      	mov	r6, r1
 80043c6:	b921      	cbnz	r1, 80043d2 <_realloc_r+0x16>
 80043c8:	4611      	mov	r1, r2
 80043ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ce:	f7ff bf81 	b.w	80042d4 <_malloc_r>
 80043d2:	b92a      	cbnz	r2, 80043e0 <_realloc_r+0x24>
 80043d4:	f7ff ff16 	bl	8004204 <_free_r>
 80043d8:	4625      	mov	r5, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e0:	f000 f838 	bl	8004454 <_malloc_usable_size_r>
 80043e4:	4284      	cmp	r4, r0
 80043e6:	4607      	mov	r7, r0
 80043e8:	d802      	bhi.n	80043f0 <_realloc_r+0x34>
 80043ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043ee:	d812      	bhi.n	8004416 <_realloc_r+0x5a>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4640      	mov	r0, r8
 80043f4:	f7ff ff6e 	bl	80042d4 <_malloc_r>
 80043f8:	4605      	mov	r5, r0
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d0ed      	beq.n	80043da <_realloc_r+0x1e>
 80043fe:	42bc      	cmp	r4, r7
 8004400:	4622      	mov	r2, r4
 8004402:	4631      	mov	r1, r6
 8004404:	bf28      	it	cs
 8004406:	463a      	movcs	r2, r7
 8004408:	f7ff fed4 	bl	80041b4 <memcpy>
 800440c:	4631      	mov	r1, r6
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fef8 	bl	8004204 <_free_r>
 8004414:	e7e1      	b.n	80043da <_realloc_r+0x1e>
 8004416:	4635      	mov	r5, r6
 8004418:	e7df      	b.n	80043da <_realloc_r+0x1e>
	...

0800441c <_sbrk_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	2300      	movs	r3, #0
 8004420:	4d05      	ldr	r5, [pc, #20]	; (8004438 <_sbrk_r+0x1c>)
 8004422:	4604      	mov	r4, r0
 8004424:	4608      	mov	r0, r1
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	f7fc fdda 	bl	8000fe0 <_sbrk>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_sbrk_r+0x1a>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_sbrk_r+0x1a>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	20000184 	.word	0x20000184

0800443c <__malloc_lock>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__malloc_lock+0x8>)
 800443e:	f000 b811 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8004442:	bf00      	nop
 8004444:	20000188 	.word	0x20000188

08004448 <__malloc_unlock>:
 8004448:	4801      	ldr	r0, [pc, #4]	; (8004450 <__malloc_unlock+0x8>)
 800444a:	f000 b80c 	b.w	8004466 <__retarget_lock_release_recursive>
 800444e:	bf00      	nop
 8004450:	20000188 	.word	0x20000188

08004454 <_malloc_usable_size_r>:
 8004454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004458:	1f18      	subs	r0, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfbc      	itt	lt
 800445e:	580b      	ldrlt	r3, [r1, r0]
 8004460:	18c0      	addlt	r0, r0, r3
 8004462:	4770      	bx	lr

08004464 <__retarget_lock_acquire_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_release_recursive>:
 8004466:	4770      	bx	lr

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
